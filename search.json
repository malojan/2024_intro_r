[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Course overview\nThis website contains all the material for the lab sessions of the Quantitative Methods class for the Fall 2025 semester in the research master’s program in Political Science at Sciences Po Paris. The class complements Jan Rovny’s lecture on Quantitative Methods I.\nThe course provides you with the fundamentals, resources, and motivation to further your learning independently, prepare for the next semester Luis Sattelmayer’s R sessions, and apply quantitative methods in your future research.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#course-structure",
    "href": "index.html#course-structure",
    "title": "Introduction to R",
    "section": "Course structure",
    "text": "Course structure\n\n\n\nSession\nDescription\nDate\n\n\n\n\nSession 1\nGetting started with R and Rstudio\n05/09, 12/09\n\n\nSession 2\nManipulating and describing data\n19/09, 26/09\n\n\nSession 3\nVisualizing data\n03/10, 10/10\n\n\nSession 4\nTesting relationships\n17/10, 24/10\n\n\nSession 5\nCorrelation and simple linear regression\n07/11, 14/11\n\n\nSession 6\nMultivariate analysis\n21/11, 28/11",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#course-validation",
    "href": "index.html#course-validation",
    "title": "Introduction to R",
    "section": "Course validation",
    "text": "Course validation\nLearning programming is fundamentally about practice. It involves trying, encountering challenges, and solving them. The course assessment is structured around a series of exercises that will constitute 30% of your final grade in the Quantitative Methods class. You will be required to apply the code and concepts covered in class to new problems and datasets.\nThroughout the semester, you will complete four individual exercises between sessions. For each exercise, you will perform a series of operations in R and submit your work. Each exercise will be graded on a scale from 0 to 5 points.\nSecond, at the end of the semester, you will complete a bigger group exercise with one other person. This exercise will involve integrating content from throughout the semester and will be completed within a two-week timeframe. It will be graded on a scale from 0 to 20 points.\n\n\n\nAssignments\nDescription\nDue date\nWeight\n\n\n\n\nExercise 1\nIndividual\n7 days after Session 1\n5%\n\n\nExercise 2\nIndividual\n7 days after Session 2\n5%\n\n\nExercise 3\nIndividual\n7 days after Session 3\n5%\n\n\nExercise 4\nIndividual\n7 days after Session 4\n5%\n\n\nExercise 5\nGroup\n14 days after session 6\n10%",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Introduction to R",
    "section": "Requirements",
    "text": "Requirements\nThis class does not require any prior programming or statistical experience and is designed for complete beginners. However, it does require some basic knowledge of how to use a computer. You should be able to navigate your computer’s file system, create and move folders, and download and save files. Specifically, each class’s content will be provided as a zip file, which you will need to download, unzip, and move to a folder on your computer. If you are not familiar with these operations, please refer to this tutorial.\nThis class requires you to bring a laptop to each session with R and RStudio installed by the start of the course. The ‘Setting up R and RStudio’ page on this website provides a step-by-step guide for installation. If you encounter any issues during the setup or are unable to bring a laptop to class, please let me know.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#course-material",
    "href": "index.html#course-material",
    "title": "Introduction to R",
    "section": "Course material",
    "text": "Course material\nBefore each session, you will be provided with the class material, which you should download to your laptop to follow along. Additionally, all class activities and resources will be available on this website for future reference. You will also need to submit your exercises on the course’s Moodle page.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#help",
    "href": "index.html#help",
    "title": "Introduction to R",
    "section": "Help",
    "text": "Help\nIf you have any questions regarding the course, need help, or are looking for additional resources, please do not hesitate to contact me via email. I will be happy to assist you and will try to reply as quickly as possible.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#ressources",
    "href": "index.html#ressources",
    "title": "Introduction to R",
    "section": "Ressources",
    "text": "Ressources\nThis course does not have a required textbook or mandatory readings. However, if you wish to deepen your understanding of the content covered, I recommend familiarizing yourself with the following resources:\n\nR for Data Science, this is THE R classic by Hadley Wickham, you should definitely take a look to better understand what we cover in this course.\nTelling stories with data by Rohan Alexander : one of my favorite book on data science with R. (a bit more advanced)\nComputational analysis of communication by van Atteveldt et al.\nComputational Thinking for Social Scientists by Jae Yeon Kim\nIntroduction to data science by Rafael Irizarry\n\nThere are also many other introductions to R available online, each offering different approaches to teaching the same concepts. I recommend the following:\n\nIntroduction to R, by Felix Lennert\nIntroduction to R by Alex Douglas et al.\n\nIf you want ressources in french, these are the two most comprehensive introduction you will find :\n\nIntroduction à R et au tidyverse by Julien Barnier\nGuide pour l’analyse de données d’enquêtes avec R by Joseph Larmarange",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setting up R and Rstudio",
    "section": "",
    "text": "Install R\nYou can install R from CRAN (The comprehensive R Archive Network). On CRAN, you will find links to download the version of R you need for your operating system (Windows, Mac or Linux). Once the download is complete, you need to execute the installer.",
    "crumbs": [
      "Setting up R and Rstudio"
    ]
  },
  {
    "objectID": "setup.html#install-rstudio",
    "href": "setup.html#install-rstudio",
    "title": "Setting up R and Rstudio",
    "section": "Install Rstudio",
    "text": "Install Rstudio\nOnce R is set up, you can install Rstudio. For this, go on this webpage, download Rstudio and follow the instructions.",
    "crumbs": [
      "Setting up R and Rstudio"
    ]
  },
  {
    "objectID": "setup.html#set-preferences-and-check-if-everything-works",
    "href": "setup.html#set-preferences-and-check-if-everything-works",
    "title": "Setting up R and Rstudio",
    "section": "Set preferences and check if everything works",
    "text": "Set preferences and check if everything works\nOnce the installation of both R and Rstudio is complete, you should open Rstudio. If everything worked, something very similar to the screenshot below should appear. If it doesn’t open, restart your latptop and try again.\n\nRStudio has some default settings that are worth changing to adopt best practices. Please do the following:\n\nTools /Global options/RGeneral : Save workspace to never and uncheck the box Restore .Rdata into workspace at startup.\n\nWhile R provides a series of basic commands for data manipulation, many of the functionalities we will use come from packages that need to be installed and loaded via RStudio. The most well-known package we will use is called tidyverse. To check if your installation is successful and you are ready to start the course, copy-paste the following code into the console pane and press enter. It might take a few minutes, and at the end, you should see the same message as the one below.\n\nif (!require(tidyverse)) {install.packages(\"tidyverse\")}\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ─────────────────── tidyverse 2.0.0.9000 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Setting up R and Rstudio"
    ]
  },
  {
    "objectID": "setup.html#installation-issues",
    "href": "setup.html#installation-issues",
    "title": "Setting up R and Rstudio",
    "section": "Installation issues",
    "text": "Installation issues\nIf you do not see the message above, welcome in the world of troubleshooting! Depending on your operating system (MacOS, Windows, Linux) and the configuration of your computer, the installation process may not go as smoothly as expected. Here are some common issues and how to solve them:\nMac\nIf a message appears saying that the package cannot be found, try the following :\n\nif (!require(tidyverse)) {devtools::install_github(\"hadley/tidyverse\")}\n\nWindows\nIf a message appears saying that the package cannot be found, try to install Rtools by copying and pasting the following code into the console pane.\n\nif (Sys.info()[\"sysname\"] == \"Windows\") {\n  install.packages(\"Rtools\")\n}\n\nIf a message appears that Rtools is not available, download it from here. Then restart your computer and try to install the tidyverse package again.\nIf all of this does not work or you have different types of issues, please contact me.",
    "crumbs": [
      "Setting up R and Rstudio"
    ]
  },
  {
    "objectID": "session01/workflow.html",
    "href": "session01/workflow.html",
    "title": "\n1  Rstudio, scripts, quarto\n",
    "section": "",
    "text": "1.1 How Rstudio is organized\nTo interact with the language R, we use the interface of Rstudio. When you open it on your laptop, you will probably see something similar to the screenshot below.\nOn the upper right panel, you have what we call the environment. At this stage, you should see a message indicating that your environment is empty. However, when we use data in RStudio, what we manipulate will appear there. For instance, if I import a dataset, I will see in that pane that my dataset has been imported.\nOn the bottom left panel, you see what we call our working directory. This is where the files, such as the data, that we want to use are stored on our laptop. It is essential to be aware that if you remove a file here from RStudio, it will also be deleted from your laptop. Exercise caution when managing files in this directory to avoid unintentional deletions.\nOn the left side, you have the console where you can type commands, indicated by the &gt; sign. If you type something here and then click on Enter, you will see the result. So, if you type 2+2, it will produce the output 4 just below. Whatever code you produce, the output will appear in the console.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Rstudio, scripts, quarto</span>"
    ]
  },
  {
    "objectID": "session01/workflow.html#scripts",
    "href": "session01/workflow.html#scripts",
    "title": "\n1  Rstudio, scripts, quarto\n",
    "section": "\n1.2 Scripts",
    "text": "1.2 Scripts\nHowever, when we interact with R, we rarely use the console to type code. Instead, we mostly use scripts, which are specific types of documents where you can write code, save it, and reuse it later on. To open a new script, you can go into the menu bar, click on File &gt; New File &gt; Rscript (you can also use the shortcut Ctrl+Shift+N on Windows/Linux or Cmd+Shift+N on macOS). his will open a new document, known as an R script, in the editor on the upper left side of the interface. Here, you can start writing and saving your R code for analysis and projects. You can type again 2+2. To run a line on a Rscript, place the cursor on the line of code you want to run and press Ctrl + Enter (on Windows/Linux) or Cmd + Enter (on macOS). Just above the script in RStudio, you will also find a Run button that does the same thing. Once you run that code, you should see the output printed in the console. Note that in R scripts, you can write text and comment your code with the #. To save your script, simply click on the small disk icon in the editor’s toolbar and choose a name for the file (Ctrl + S on Windows/Linux or Cmd + S on macOS). You will now see it in the files pane at the bottom left of your screen.\n\n2+2 # This is my first code\n\n[1] 4",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Rstudio, scripts, quarto</span>"
    ]
  },
  {
    "objectID": "session01/workflow.html#quarto",
    "href": "session01/workflow.html#quarto",
    "title": "\n1  Rstudio, scripts, quarto\n",
    "section": "\n1.3 Quarto",
    "text": "1.3 Quarto\nWhile many users opt for R scripts for coding, I won’t extensively employ them in this class. Instead, I’ll be using Quarto documents. You will also be using Quarto as I’ll be requesting you to submit your assignments using this format. Quarto constitutes a method of cohesively editing code and text within a single document, a practice termed literate programming. It enables you to compose code, generate output, conduct analyses in the same document, format the content, and subsequently export it to diverse formats like Word documents, PDFs and html. Additionally, Quarto facilitates the creation of slides, dashboards, books, and websites. Personally, I employ Quarto to craft the course materials.\nTo create a quarto document, click on File &gt; New File &gt; Quarto Document in the menu bar. You will see different options appear but for now, uncheck use virtual markdown editor and click on create an empty document. There are three main differences with an R script :\n\n\nYAML : when you open a quarto document you will have to fill the top matter, called a call a YAML which is separated by --- where you can write different informations and options such as the title, the author, subtitle, abstract, the data and many other things. You can also choose the format of the output by writing format: and choosing among html, docx or pdf.\nYou can type text without the # as if you where typing in any text editor\nTo write code, you need to create what we call a chunk. For this, either go on the menu bar : Code &gt; Insert Chunk or option + Cmd + i in macOs, Ctrl+Alt+i on Windows/Linux. You can then directly type code in that chunk.\n\nTo generate a pdf/html/word document, you need to click on Render (Cmd + Shift + K in macOs, {&lt; kbd win=Shift-Ctrl-P &gt;}}). A new file will appear in your files pane with the output.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Rstudio, scripts, quarto</span>"
    ]
  },
  {
    "objectID": "session01/basics.html",
    "href": "session01/basics.html",
    "title": "\n2  R basics\n",
    "section": "",
    "text": "2.1 R as calculator\nFirst of all, R is a fancy calculator that can be used to perform fundamental arithmeric operations.\n3+7+10 # Addition\n\n[1] 20\n\n4-5 # Substraction\n\n[1] -1\n\n3*9*10 # Multiplication\n\n[1] 270\n\n2/6 # Division\n\n[1] 0.3333333\n\n2^2 # Exponentiation\n\n[1] 4\n\n(2+2)-(4*4)/2^2 # Mix of operations\n\n[1] 0",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#objects",
    "href": "session01/basics.html#objects",
    "title": "\n2  R basics\n",
    "section": "\n2.2 Objects",
    "text": "2.2 Objects\nWhen you run code in R, the results are shown in the console. However, you cannot directly reuse these results in further operations, which is what we want to do. To address this, we use objects. Objects in R act as containers that store values, allowing you to keep information for later use. To create an object in R, you use the assignment operator &lt;- .\n\nmy_object &lt;- 2\nmy_object\n\n[1] 2\n\n\nLet’s consider an example from the most recent French general election. The results led to a highly fragmented parliament, with 11 different parliamentary groups and no single party or coalition able to form an absolute majority on its own. This situation raises the question of which coalitions could be formed to achieve a majority and pass legislation. The code below uses objects to store the number of seats obtained by each parliamentary group.\n\n# Left-wing groups\ncommunists_seats &lt;- 17\nlfi_seats &lt;- 72\ngreens_seats &lt;- 38\nsocialists_seats &lt;- 66\n\n# Macron's party and allies\nrenaissance_seats &lt;- 99  # This is Macron's party\nmodem_seats &lt;- 36        # MODEM, a centrist party\nhorizon_seats &lt;- 31      # Horizon, party of the former PM Édouard Philippe\n\n# Right-wing groups\nconservatives_seats &lt;- 47  # \"Les Républicains\"\n\n# Far-right groups\nrn_seats &lt;- 126            # National Rally (RN)\nciotti_seats &lt;- 16         # Former conservatives who allied with Le Pen's party\n\n# Others\nliot_seats &lt;- 22           # A mix of some independent centrists and regionalists\nnone_seats &lt;- 7            # Non-affiliated MPs\n\nAfter executing these lines, you should be able to see the objects created and their values in the environment pane located in the upper-right section of RStudio. Once these objects created, it is possible to perform operations on them. For instance, it is possible to compute the total number of seats of actual existing coalitions by summing the number of seats of the different parties that compose them and saving them in new objects. Below, I create a new object left_seats that stores the total number of seats obtained by the left-wing parties by summing the different objects that store the number of seats obtained by the left-wing parties.\n\nleft_seats &lt;- communists_seats + lfi_seats + greens_seats + socialists_seats\nleft_seats\n\n[1] 193\n\n\n\n\n\n\n\n\nYour turn !\n\n\n\nCreate two new objects macron_seats and far_right_seats that store the total number of seats obtained by Macron’s allies and far-right parties respectively.\n\nSolution. Click to expand!\nSolution:\n\nmacron_seats &lt;- renaissance_seats + modem_seats + horizon_seats\nfar_right_seats &lt;- rn_seats + ciotti_seats",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#vectors",
    "href": "session01/basics.html#vectors",
    "title": "\n2  R basics\n",
    "section": "\n2.3 Vectors",
    "text": "2.3 Vectors\nThe objects we used so far contained only one numeric value. However, what we mostly manipulate in R are vectors, which are sequences of different values on which we can perform operations. Vectors can be of different types (eg : numeric, character, logical, date) but they have to be of the same type. For instance, a numeric vector is a sequence of different numbers and a character vector is a sequence of different strings. Vectors are also unidimensionals which mean they contains only one sequence of values and not several such as matrices do.\nWe can generate vectors with c() which stands for “concatenate”. For instance, here, I create a vector containing the values of the seats obtained by different coalitions in the election. As a result, the vector coalition_seats contains the number of seats obtained by the left, Macron’s party and allies, the far-right and the conservatives.\n\ncoalition_seats &lt;- c(left_seats, macron_seats, far_right_seats, conservatives_seats)\ncoalition_seats\n\n[1] 193 166 142  47\n\n\nWe use vectors to store different values because it is possible to perform the same operation on all the values of a vector at once. Let’s say we want to know the number of seats that an existing coalition would need to have an absolute majority in the parliament. We can do this by creating a new object, majority, that stores the number of seats needed for an absolute majority, and then subtracting the number of seats obtained by the different coalitions from this value. The result will be a vector showing the number of seats each coalition needs to reach an absolute majority, which we could also store in a new object if desired.\n\nmajority &lt;- 577/2 + 0.5 # Half of the number of seats (577) + 0.5 to round up (there is no half MP)\n\nmajority \n\n[1] 289\n\nmajority - coalition_seats\n\n[1]  96 123 147 242\n\n\n\n2.3.1 Characters vectors\nSo far, we have only used numerical vectors, which consist of numbers. However, we can also create character vectors, which are made up of strings enclosed in quotes (either single ' or double \"). For example, we can create a vector containing the names of different parliamentary leaders.\n\nleft_leaders &lt;- c(\"Chassaigne\", \"Chatelain\", \"Panot\", \"Vallaud\") # Create a vector of left-wing leaders\nfar_right_leaders &lt;- c(\"Ciotti\", \"Le Pen\") # Create a vector of far-right leaders\n\nAs for other vectors, you can combine them in a single vector which will return a vector with all the leaders’ names.\n\nleaders &lt;- c(left_leaders, far_right_leaders)\nleaders\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"    \"Ciotti\"    \n[6] \"Le Pen\"    \n\n\n\n\n\n\n\n\nYour turn !\n\n\n\nCreate a vector that contains the names of the leaders of the Macron’s party : Attal, Fesneau, Marcangeli. Then, add this vector to the leaders vector and store the result in a new object all_leaders.\n\nSolution. Click to expand!\nSolution:\n\nmacron_leaders &lt;- c(\"Attal\", \"Fesneau\", \"Marcangeli\")\nall_leaders &lt;- c(leaders, macron_leaders)",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#functions",
    "href": "session01/basics.html#functions",
    "title": "\n2  R basics\n",
    "section": "\n2.4 Functions",
    "text": "2.4 Functions\nTo manipulate vectors and conduct operations on them, we use functions. A function is a reusable block of code that performs a specific task, it takes several input values called arguments and produce an output. Let’s say you want to know how many seats parliamentary groups have on average in the French parliament. You could calculate the sum of the seats and dividing them by their number. But you could also just the mean() function that exists in R and that takes a vector of numbers as argument.\n\nparl_seats &lt;- c(communists_seats, greens_seats, socialists_seats, lfi_seats, renaissance_seats, modem_seats, horizon_seats, conservatives_seats, ciotti_seats, rn_seats, none_seats, liot_seats)\n\nmean(parl_seats) # Compute the mean of the vector parl_seats\n\n[1] 48.08333\n\n\nIt is also easy to use functions to compute the maximum, minimum, and sum of a vector of numbers.\n\nmax(parl_seats) # Compute the maximum of the vector parl_seats\n\n[1] 126\n\nmin(parl_seats) # Compute the minimum of the vector parl_seats\n\n[1] 7\n\nsum(parl_seats) # Compute the sum of the vector parl_seats\n\n[1] 577",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#missing-values",
    "href": "session01/basics.html#missing-values",
    "title": "\n2  R basics\n",
    "section": "\n2.5 Missing values",
    "text": "2.5 Missing values\nIn R, a missing value is represented by the symbol NA, which stands for “Not Available.” Missing values can arise for a variety of reasons, such as data not being observed or recorded, errors in data collection, or intentional omissions. Understanding and handling missing values is crucial because they can influence the results of your analysis or even cause some functions to return errors. For instance, imagine I haven’t found any information about the number of seats one parliamentary group get, but I want to retain this information in my vector. So, I add an NA to it.\n\nparl_seats &lt;- c(parl_seats, NA)\nparl_seats\n\n [1]  17  38  66  72  99  36  31  47  16 126   7  22  NA\n\n\nWhen analyzing data, it’s not uncommon to encounter NA values, and it’s important to be aware of them. To check if a vector contains NA values, you can use the is.na() function. This function will returns what is called a logical vector that is a sequence of values where each element is either (TRUE) or not (FALSE). Logical vectors are often used to represent conditions or logical statements.\n\nis.na(parl_seats) # Check which values of a vector are NAs\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13]  TRUE\n\n\nThis is important because certain functions will not operate properly if there are NA values in your data. For instance, the mean() function will return NA if the data contains any NA values\n\nmean(parl_seats)\n\n[1] NA\n\n\nTo deal with NA, the mean() function has a na.rm\n\nmean(parl_seats, na.rm = TRUE) # Remove NA before computing the mean\n\n[1] 48.08333",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#packages-and-libraries",
    "href": "session01/basics.html#packages-and-libraries",
    "title": "\n2  R basics\n",
    "section": "\n2.6 Packages and libraries",
    "text": "2.6 Packages and libraries\nThe functions we’ve discussed so far, such as sum() and mean(), come from base R. These are pre-loaded functions available immediately upon starting R. However, many functions you’ll encounter aren’t part of base R but instead belong to specific packages that individuals or groups have developed. You can think of packages as collections of functions crafted to simplify certain tasks or to introduce new capabilities to R. For example, there’s the tidyverse package, which I asked you to install before the class\nTo install a package in R, you can use the install.packages() function, passing the name of the package in quotation marks (either single or double). I recommend doing this installation in the console since you don’t need to save this step; it’s a one-time action. However, every time you start your script or Quarto document, you’ll need to load the package. To do this, use the library() function, providing the package name as an argument, but without the quotation marks.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ─────────────────── tidyverse 2.0.0.9000 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#dataframes-and-tibbles",
    "href": "session01/basics.html#dataframes-and-tibbles",
    "title": "\n2  R basics\n",
    "section": "\n2.7 Dataframes and tibbles",
    "text": "2.7 Dataframes and tibbles\nWhen processing data, we primarily interact with vectors through the manipulation of dataframes in R. Dataframes are two-dimensional structures that contain rows and columns. Each column is a vector, and each row is an observation. Dataframes are the primary data structure used for data manipulation, computation, and visualization in R. In this class, we’ll work with a specific type of dataframe that comes from the tidyverse package called a tibble. Tibbles are a modern and enhanced version of dataframes that make them easier to print and manipulate.\nTo understand what dataframes look like, let us continue with the results of the french elections. I manually create a tibble with the tibble() function with different variables about parliamentary groups\n\nleft_coalition &lt;- tibble(\n  party = c(\"Communists\", \"Greens\", \"LFI\", \"Socialists\"),\n  leader = c(\"Chassaigne\", \"Chatelain\", \"Panot\", \"Vallaud\"),\n  seats_2024 = c(17, 38, 72, 66),\n  seats_2022 = c(22, 21, 75, 31)\n)\n\nleft_coalition\n\n# A tibble: 4 × 4\n  party      leader     seats_2024 seats_2022\n  &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;\n1 Communists Chassaigne         17         22\n2 Greens     Chatelain          38         21\n3 LFI        Panot              72         75\n4 Socialists Vallaud            66         31\n\n\nYou see now that we have a new object in our Environment Pane with 4 observations and 4 variables.\nDifferent functions are available to get an idea of the informations and shape of the dataframe, which are useful when we load an unknown dataset and we want to understand its structure, what are the observations and variables.\n\nglimpse(left_coalition) # Get a glimpse of your data\n\nRows: 4\nColumns: 4\n$ party      &lt;chr&gt; \"Communists\", \"Greens\", \"LFI\", \"Socialists\"\n$ leader     &lt;chr&gt; \"Chassaigne\", \"Chatelain\", \"Panot\", \"Vallaud\"\n$ seats_2024 &lt;dbl&gt; 17, 38, 72, 66\n$ seats_2022 &lt;dbl&gt; 22, 21, 75, 31\n\ncolnames(left_coalition) # Retrieve column names of the dataframe\n\n[1] \"party\"      \"leader\"     \"seats_2024\" \"seats_2022\"\n\nsummary(left_coalition) # Return a summary of the variables\n\n    party              leader            seats_2024      seats_2022   \n Length:4           Length:4           Min.   :17.00   Min.   :21.00  \n Class :character   Class :character   1st Qu.:32.75   1st Qu.:21.75  \n Mode  :character   Mode  :character   Median :52.00   Median :26.50  \n                                       Mean   :48.25   Mean   :37.25  \n                                       3rd Qu.:67.50   3rd Qu.:42.00  \n                                       Max.   :72.00   Max.   :75.00  \n\n\nIf we want to access only one variable (one vector) of that dataframe, we use the $ sign. This will return a vector of the values of this variable.\n\nleft_coalition$party # Select the party variable\n\n[1] \"Communists\" \"Greens\"     \"LFI\"        \"Socialists\"\n\n\nYou can also create new variables based on the existing ones. Here I create a new variable called seats_changeby calculating the difference of seats between 2024 and 2022 for each party.\n\nleft_coalition$seats_change &lt;- left_coalition$seats_2024 - left_coalition$seats_2022\n\n\n\n\n\n\n\nYour turn !\n\n\n\nCreate a new variable called seats_share that calculates the share of seats in 2024 for each party. The share of seats is calculated as the number of seats of the party divided by the total number of seats in the parliament multiplied by 100.\n\nSolution. Click to expand!\nSolution:\n\nleft_coalition$seats_share &lt;- left_coalition$seats_2024/577*100\nleft_coalition\n\n# A tibble: 4 × 6\n  party      leader     seats_2024 seats_2022 seats_change seats_share\n  &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1 Communists Chassaigne         17         22           -5        2.95\n2 Greens     Chatelain          38         21           17        6.59\n3 LFI        Panot              72         75           -3       12.5 \n4 Socialists Vallaud            66         31           35       11.4",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#import-and-write-data",
    "href": "session01/basics.html#import-and-write-data",
    "title": "\n2  R basics\n",
    "section": "\n2.8 Import and write data",
    "text": "2.8 Import and write data\nUp until now, we have been creating data manually for demonstration purposes. As we move forward, we will focus on analyzing real data. Every data analysis project starts with acquiring data. You can generate your own data through surveys, web scraping, or manual data coding (primary data sources). However, there are also many pre-existing datasets available for use (secondary data sources). These datasets are often provided by researchers, governments, NGOs, companies, international organizations, and more. I highly recommend checking out this list of political datasets curated by Erik Gahner Larsen. Throughout this course, we will use some of these established datasets in political science.\n\n2.8.1 File formats, paths and R projects\nTo analyze data in R, we first need to import it. While this might sound simple, it can be challenging for beginners. To read a file in R, we need to know two important things: the file format and the path.\nData comes in various file formats, which are standardized ways of storing and organizing data in digital files. These formats dictate how information is encoded and structured, allowing different software programs to understand and interpret the data correctly. The most common format for data is .csv (comma-separated values). In political science, you will also encounter Stata (.dta) and SPSS (.sav) files. R uses different functions to read files depending on their format.\nSecondly, R needs to know where the data is located on your system. A “path” shows the position of a file or folder within your file system, detailing the series of directories and subdirectories leading to the file. There are two types of paths:\n\nThe absolute path gives the complete location of a file or directory, beginning at the root of the file system. Examples include: /home/user/documents/myfile.txt for Unix-like systems, and C:\\Users\\user\\Documents\\myfile.txt for Windows.\nA relative path indicates the location of a file or directory in relation to the current working directory. For instance, data/mydata.csv points to a file named mydata.csv in the data subdirectory of the present directory.\n\nThe working directory refers to the directory where R is currently operating. If you access files in R without providing an absolute path, it defaults to searching within this working directory.\nYou can see your current working directory in R using the getwd() function. To set a new working directory, use the setwd() function, specifying the desired path as its argument.\n\ngetwd()\n\n[1] \"/Users/malo/Documents/teaching/2024_intro_r/session01\"\n\n\nPlease note that using absolute paths in your code is considered a bad practice because it can make your code less usable for others. Instead, I recommend using R projects. An R project is a dedicated workspace for your R work, where you keep all your files, data, scripts, and output documents together. When you open an R project, it sets everything up so that your files are easy to find and your work is easier to share and reproduce.\nFrom the top left corner of RStudio, click on File and then select New Project. You’ll then be given three options: to create a project in an existing directory, to create one in a new directory, or to check out a project from a version control repository like Git.\nIf you choose an existing directory, navigate to that directory. If you opt for a new directory, you’ll need to name your project and decide its save location on your computer. Once you finalize your choice by clicking Create Project, the working directory in RStudio will automatically be set to your project location. This means that any scripts, data files, or outputs you work on will be saved here by default, making them easier to find and reference later.\nInside your project directory, you’ll notice a file with an .Rproj extension, such as MyProject.Rproj. In the future, you can open this file to launch RStudio directly into this project, ensuring the working directory is already set. It’s also advisable to set up specific folders within your project directory for different components like scripts, data, and figures. This keeps everything tidy and organized as your project expands.\n\n2.8.2 Functions to import data in R\nThere are different functions to import data into R.\n\nFor CSV (Comma Separated Values) files, the base R function read.csv() is commonly used. However, within the tidyverse package suite, the readr package provides the read_csv() function, which tends to be faster and more versatile. The read_csv2() function is designed for CSV files using semicolons ; as field separators and commas , as decimal points, compared to read_csv()which assumes commas as field separators.\nExcel files can be read using the readxl package, which provides the read_excel() function. This function can read both .xls and .xlsx files.\nFor SPSS data files, you can use the haven package. This package contains the function read_sav() for .sav files.\nStata data files, or .dta files, can also be read using the haven package with the read_dta() function.\n\nAll these functions enable you to read a file by specifying its path. Here, for example, I import a CSV file containing data on candidates for the 2024 legislative elections in France.\n\nlibrary(tidyverse)\n\nfrench_candidates &lt;- read_csv(\"data/2024_french_candidates.csv\")\n\nRows: 4009 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): code_department, departement, first_name, name, nuance, gender, pro...\ndbl (2): exprimes_per, age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(french_candidates)\n\nRows: 4,009\nColumns: 9\n$ code_department &lt;chr&gt; \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", …\n$ departement     &lt;chr&gt; \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\"…\n$ first_name      &lt;chr&gt; \"Christophe\", \"Xavier\", \"Sébastien\", \"Vincent\", \"Éric\"…\n$ name            &lt;chr&gt; \"MAÎTRE\", \"BRETON\", \"GUERAUD\", \"GUILLERMIN\", \"LAHY\", \"…\n$ nuance          &lt;chr&gt; \"RN\", \"LR\", \"UG\", \"ENS\", \"EXG\", \"DSV\", \"DSV\", \"RN\", \"D…\n$ exprimes_per    &lt;dbl&gt; 39.37, 23.96, 23.45, 11.68, 0.69, 0.52, 0.33, 39.20, 2…\n$ gender          &lt;chr&gt; \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", …\n$ age             &lt;dbl&gt; 55, 62, 51, 48, 58, 36, 42, 35, 44, 37, 49, 69, 59, 43…\n$ profession      &lt;chr&gt; \"(22) - Commerçant et assimilé\", \"(33) - Cadre de la f…\n\n\n\n2.8.3 Export data\nTypically, we might want to save data to our disk after adding information, merging different datasets, and so on. This is useful for later reuse or to share the data with someone else. To achieve this, simply replace ‘read’ with ‘write’ in all the functions I’ve introduced previously. You’ll also need to specify the name of the R object containing your data and the path where you wish to export the data.\n\nwrite_csv(french_candidates, \"data/french_candidates2.csv\")",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#going-further",
    "href": "session01/basics.html#going-further",
    "title": "\n2  R basics\n",
    "section": "\n2.9 Going further",
    "text": "2.9 Going further\n\n2.9.1 Naming things\nNote that I have written the names of objects with underscores. There are different conventions to write object names in R that you can discover here. I personnaly use snake case which use lowercase letters and underscores to separate words.\n\n2.9.2 Packages\nRather than importing packages with library(), it is also possible to use the :: operator such as :\n\ndplyr::glimpse(french_candidates)\n\nRows: 4,009\nColumns: 9\n$ code_department &lt;chr&gt; \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", …\n$ departement     &lt;chr&gt; \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\"…\n$ first_name      &lt;chr&gt; \"Christophe\", \"Xavier\", \"Sébastien\", \"Vincent\", \"Éric\"…\n$ name            &lt;chr&gt; \"MAÎTRE\", \"BRETON\", \"GUERAUD\", \"GUILLERMIN\", \"LAHY\", \"…\n$ nuance          &lt;chr&gt; \"RN\", \"LR\", \"UG\", \"ENS\", \"EXG\", \"DSV\", \"DSV\", \"RN\", \"D…\n$ exprimes_per    &lt;dbl&gt; 39.37, 23.96, 23.45, 11.68, 0.69, 0.52, 0.33, 39.20, 2…\n$ gender          &lt;chr&gt; \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", …\n$ age             &lt;dbl&gt; 55, 62, 51, 48, 58, 36, 42, 35, 44, 37, 49, 69, 59, 43…\n$ profession      &lt;chr&gt; \"(22) - Commerçant et assimilé\", \"(33) - Cadre de la f…\n\n\nIt lets you reference a specific function from a package without loading the whole package. This is handy when two packages have functions with the same name, ensuring clarity in your code. It’s also useful for one-off function uses, avoiding the need to load an entire package. This approach can make code clearer and sometimes faster by reducing loaded dependencies\n\n2.9.3 Indexing\nWhen we manipulate vectors, we often want to access specific elements of them, which we call indexing, which is performed by using square brackets []. You can index either by position or by name.\nWhen I write leaders[3], I want the value of the third element of the leaders vector, this is indexing by position. But when I write leaders[leaders == \"Le Pen\"], I index by name because I want the elements that have Le Pen as value.\n\nleaders\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"    \"Ciotti\"    \n[6] \"Le Pen\"    \n\nleaders[4] # Get the third element of the vector\n\n[1] \"Vallaud\"\n\nleaders[-3] # Get everything but the third element of the vector\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Vallaud\"    \"Ciotti\"     \"Le Pen\"    \n\nleaders[c(1,4)] # Get the first and the fifth elements of the vector\n\n[1] \"Chassaigne\" \"Vallaud\"   \n\nleaders[1:3] # Get elements from the first to the third\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"     \n\nleaders[leaders == \"Le Pen\"] # Which has Le Pen as value\n\n[1] \"Le Pen\"\n\nleaders[leaders != \"Le Pen\"] # Which has not Le Pen as value\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"    \"Ciotti\"    \n\nleaders[leaders %in% c(\"Le Pen\", \"Ciotti\")]# Which has Le Pen or Ciotti\n\n[1] \"Ciotti\" \"Le Pen\"\n\nleaders[!leaders %in% c(\"Le Pen\", \"Ciotti\")]# Which has neither Le Pen nor Ciotti\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"   \n\n\n\n2.9.4 Logical vectors\nAnother type of vector in R is the logical vector, which consists of Boolean values: TRUE or FALSE. Logical vectors are useful for evaluating conditions. They can be used to check for errors in data or to filter variables based on specific criteria.\n\nc(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE)\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE\n\n\nFor instance, we could check whether there are no mistakes and confirm that Le Pen is not a leader of the left coalition. This means verifying that no value in the left_leaders vector is equal to “Le Pen”.\n\nleft_leaders == \"Le Pen\"\n\n[1] FALSE FALSE FALSE FALSE\n\nfar_right_leaders == \"Le Pen\"\n\n[1] FALSE  TRUE\n\n\nThe evaluation of conditions can also be used to compare numeric values. For instance, we can check whether the left coalition has more seats than the far-right coalition.\n\nleft_seats &gt; far_right_seats\n\n[1] TRUE\n\n\n\n2.9.5 More on vectors and functions\nIn R, functions often expect inputs of specific types. If you pass a character vector containing numeric numbers as strings to a function that expects a numeric vector, it may not behave as expected. As shown below, the function returns a NA which means Not available/applicable. When R encounters something it doesn’t understand, it returns an error message with indications about the problem.\n\nparl_seats_chr &lt;- c(\"17\", \"38\", \"66\", \"72\", \"99\", \"36\", \"31\", \"47\", \"16\", \"126\", \"7\", \"22\")\nparl_seats_chr\n\n [1] \"17\"  \"38\"  \"66\"  \"72\"  \"99\"  \"36\"  \"31\"  \"47\"  \"16\"  \"126\" \"7\"   \"22\" \n\nmean(parl_seats_chr) # This returns NA\n\nWarning in mean.default(parl_seats_chr): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\nSimilarly, computing the sum of the parl_seats_chr vector will work as expected but trying to calculate the sum of our leaders character vector composed of leaders’s names will not give a meaningful result.\n\nsum(parl_seats_chr)\n\nError in sum(parl_seats_chr): invalid 'type' (character) of argument\n\nsum(leaders) # This is an error\n\nError in sum(leaders): invalid 'type' (character) of argument\n\n\nIf you are not sure about the type of your vectors, you can check with the class() function that will give you the answer.\n\nclass(parl_seats)\n\n[1] \"numeric\"\n\nclass(parl_seats_chr)\n\n[1] \"character\"\n\n\nSometimes, a vector has not the good type for the operation we want to perform. To check the type of a vector, you can use the family of is. functions such as is.numeric() and is.character() that return a boolean operator. In case the vector is not the right type for our purpose, wan can try to coerce them with the family of as. functions such as as.numeric() and as.character().\n\nis.numeric(parl_seats_chr) # Check if numeric\n\n[1] FALSE\n\nparl_seats_num &lt;- as.numeric(parl_seats_chr) # Coerce to numeric\nis.numeric(parl_seats_num) # Check again if numeric\n\n[1] TRUE\n\nmean(parl_seats_num) # Compute the mean\n\n[1] 48.08333\n\n\nFunctions that you will find in R have been created by someone. You can also create your own functions in R. You usually start doing it when you are more advanced so do not worry it you find it hard, it is just for you to know that it is possible. Here I just create a simplified other function to calculate a mean in R.\n\n# Create a function to compute the mean of a vector\n\ncompute_mean &lt;- function(x) {\n  # Compute the sum of the values in the vector and divide by the number of values (length)\n  mean &lt;- sum(x)/length(x)\n  \n  # Return the result\n  return(mean)\n}\n\ncompute_mean(parl_seats)\n\n[1] NA\n\n\n\n2.9.5.1 More on the tidyverse\nThe tidyverse isn’t just a single package but rather a meta-package, meaning it bundles together several other packages, each with its own set of functions. For example, one of these bundled packages is stringr, which offers tools for manipulating character vectors. Since stringr is part of the tidyverse, if you’ve already loaded the tidyverse, there’s no need to load stringr separately. With it, you can perform tasks like converting strings in a vector to uppercase or lowercase.\n\nleaders\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"    \"Ciotti\"    \n[6] \"Le Pen\"    \n\nstr_to_lower(leaders) # Change strings to lower class\n\n[1] \"chassaigne\" \"chatelain\"  \"panot\"      \"vallaud\"    \"ciotti\"    \n[6] \"le pen\"    \n\nstr_to_upper(leaders) # Change strings to upper class\n\n[1] \"CHASSAIGNE\" \"CHATELAIN\"  \"PANOT\"      \"VALLAUD\"    \"CIOTTI\"    \n[6] \"LE PEN\"    \n\nstr_detect(leaders, \"C\") # Detect if strings that contains a \"C\"\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE FALSE\n\n\nWe can also combine characters vectors together with str_c().\n\nparties &lt;- c(\"Communists\", \"Greens\", \"LFI\", \"Socialists\", \"Ciotti's party\", \"National Rally\")\n\nstr_c(leaders, \" is the parliamentary leader of \", parties)\n\n[1] \"Chassaigne is the parliamentary leader of Communists\"\n[2] \"Chatelain is the parliamentary leader of Greens\"     \n[3] \"Panot is the parliamentary leader of LFI\"            \n[4] \"Vallaud is the parliamentary leader of Socialists\"   \n[5] \"Ciotti is the parliamentary leader of Ciotti's party\"\n[6] \"Le Pen is the parliamentary leader of National Rally\"",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/help.html",
    "href": "session01/help.html",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "",
    "text": "3.1 R documentation\nEvery function or package in R comes with documentation provided by its creators. You can access this documentation directly from RStudio by placing a ? before the function or package name in the console and executing the command. This will open the documentation in the help pane, where you’ll find a description of the function, its various arguments, and some usage examples.\n?readr::read_csv # Access the documentation of the read_csv function",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#cheatsheets",
    "href": "session01/help.html#cheatsheets",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "\n3.2 Cheatsheets",
    "text": "3.2 Cheatsheets\nEvery package in the tidyverse (and some others) has a cheatsheet that provides information about its various functions. You can find these cheatsheets at this link For example, check out the readr cheatsheet.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#online-ressources",
    "href": "session01/help.html#online-ressources",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "\n3.3 Online ressources",
    "text": "3.3 Online ressources\nFirst, remember that you’re not alone in encountering errors in R; many others have faced similar issues before you. Often, they have sought help online. If R gives you an error you don’t understand, it’s likely that someone else has encountered the same issue and discussed it online. Start by checking if others have asked similar questions. Websites dedicated to R programming frequently have solutions from experienced users. Additionally, Google can be a valuable resource. Whether you’re trying to accomplish a task (e.g., “how to import a .dta file in R”) or resolve an error, searching the error message or your query can provide valuable insights.\nOften, you’ll find yourself on a site called Stackoverflow, a community hub for users of various programming languages. You can often copy and paste the code you find there, but it’s important to tweak and adapt it to fit your specific needs. Remember, in the world of programming, it’s common for everyone to borrow and adapt code from others. Another helpful resource is the Rstudio Commmunity. Additionally, the #rstats hashtag on Twitter can provide insights and discussions from the R programming community.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#ai-is-your-friend",
    "href": "session01/help.html#ai-is-your-friend",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "\n3.4 AI is your friend",
    "text": "3.4 AI is your friend\nLastly, we’ve entered the era of generative AI. When coding, Large Language Models, particularly ChatGPT, can swiftly emerge as invaluable allies. By supplying ChatGPT with your errors or seeking guidance for specific coding tasks, you can obtain outstanding results. I strongly suggest incorporating it into your coding journey. However, exercise caution: ChatGPT might sometimes suggest non-existent functions or present inaccurate information. It isn’t a magic bullet, but you can quickly assess the accuracy of its suggestions by testing the code in R. If the code doesn’t work correctly, the information may be incorrect. For instance, check out this example example where I asked ChatGPT to explain how to import a Stata file in R.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#most-common-errors",
    "href": "session01/help.html#most-common-errors",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "\n3.5 Most common errors",
    "text": "3.5 Most common errors\nFinally, some errors are really common and you will probably face them often. I provide you here a (non exhaustive) list of those to help you troubleshooting1.\n\n3.5.0.1 Syntax errors\nMany errors beginners encounter in R stem from syntax issues: a slight coding mistake can lead RStudio to misunderstand your intentions. Common errors include typos in function names or forgetting symbols like ), ,, or \". For example, if you missed a closing \" when trying to subset the Le Pen string from the leaders vector: leaders[leaders == \"Le Pen], you’d likely see a + in the console. This indicates that R is awaiting further input to process your command.\n\n3.5.0.2 The “not found” errors\n\n\nError: function 'x' not found : mispelling or package not loaded\n\n\nLibrary(tidyverse)\n\nError in Library(tidyverse): could not find function \"Library\"\n\nmeans(c(15,16,19)) \n\nError in means(c(15, 16, 19)): could not find function \"means\"\n\nread_html(\"https://labour.org.uk/category/latest/press-release/\") # Read html code from a webpage\n\nError in read_html(\"https://labour.org.uk/category/latest/press-release/\"): could not find function \"read_html\"\n\n\nMistakes related to capitalization or misspelling are common. For instance, attempting to compute the mean of a number vector but mistakenly adding an “s” to the mean() function will lead to an error. In another scenario, you might aim to read a webpage’s HTML code for web scraping purposes. While the function might be correctly spelled, the error arises if the required rvest package isn’t loaded beforehand. When encountering such errors, ensure you’ve spelled functions correctly and loaded the necessary package (e.g., using library(rvest)).\n\n\nError: object 'x' not found : typo, forgot to run the line or saving object\n\n\nleaders &lt;- c(\"Chassaigne\", \"Vallaud\", \"Chatelain\", \"Panot\")\nleader[1]\n\nError in eval(expr, envir, enclos): object 'leader' not found\n\n\nYou might alo want to look only at leaders from right-wing parties in the object right_wing_leaders Here, the error happens because we did not save any object with this value yet.\n\nright_wing_leaders\n\nError in eval(expr, envir, enclos): object 'right_wing_leaders' not found\n\nright_wing_leaders &lt;- c(\"Waucquiez\")\nright_wing_leaders\n\n[1] \"Waucquiez\"\n\n\nError in install.packages : object 'x' not found\n\ninstall.packages(rvest)\n\nError in eval(expr, envir, enclos): object 'rvest' not found\n\n\nMost of the time, you just forget the \"\" and you should write install.packages(\"rvest\"). It might also be a typo in the package name (eg. you would have an error with install.packag(\"Rvest\").\n\nError: 'x' does not exist in current working directory\n\n\nreadr::read_csv(\"thisdata.csv\")\n\nError: 'thisdata.csv' does not exist in current working directory ('/Users/malo/Documents/teaching/2024_intro_r/session01').\n\n\nThis error typically arises when you’ve given an incorrect path, and R can’t find your file. Use getwd() to check your current working directory and then adjust the file path as needed.\n\n3.5.0.3 Inconsistent data types\nWe have seen already that R comes with different data types such as logical or character. Many functions takes as argument a vector of a specific type and will not work on other. Below an obvious example : if we try to compute the mean of a character vector, this will not work.\n\nleaders\n\n[1] \"Chassaigne\" \"Vallaud\"    \"Chatelain\"  \"Panot\"     \n\nclass(leaders)\n\n[1] \"character\"\n\nmean(leaders)\n\nWarning in mean.default(leaders): argument is not numeric or logical: returning\nNA\n\n\n[1] NA",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#footnotes",
    "href": "session01/help.html#footnotes",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "",
    "text": "I rely on many blogposts, here, here, here, here, here and here↩︎",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session02/0201_manipulate.html",
    "href": "session02/0201_manipulate.html",
    "title": "\n4  Manipulating data\n",
    "section": "",
    "text": "4.1 Introduction to dplyr functions\nTo manipulate data, we will use a package from the tidyverse called dplyr, comprising a comprehensive suite of exceptionally useful functions. To familiarize ourselves with its usage, we will explore the Quality of Government Environmental Indicators dataset. To do this, we will need first to load the tidyverse and import the data with the haven package.\n# Load the tidyverse\n\nlibrary(tidyverse) \n\n── Attaching core tidyverse packages ─────────────────── tidyverse 2.0.0.9000 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(haven)\n\nqog &lt;- read_dta(\"data/qog_env.dta\") \n\nhead(qog)\n\n# A tibble: 6 × 414\n  cname       ccode  year cname_qog   ccode_qog ccodealp ccodealp_year ccodecow\n  &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;\n1 Afghanistan     4  1946 Afghanistan         4 AFG      AFG46              700\n2 Afghanistan     4  1947 Afghanistan         4 AFG      AFG47              700\n3 Afghanistan     4  1948 Afghanistan         4 AFG      AFG48              700\n4 Afghanistan     4  1949 Afghanistan         4 AFG      AFG49              700\n5 Afghanistan     4  1950 Afghanistan         4 AFG      AFG50              700\n6 Afghanistan     4  1951 Afghanistan         4 AFG      AFG51              700\n# ℹ 406 more variables: ccodevdem &lt;dbl&gt;, cname_year &lt;chr&gt;, version &lt;chr&gt;,\n#   act_act &lt;dbl&gt;, as_rifr &lt;dbl&gt;, as_ws &lt;dbl&gt;, bti_envc &lt;dbl&gt;, ccci_coop &lt;dbl&gt;,\n#   ccci_em &lt;dbl&gt;, ccci_fin &lt;dbl&gt;, ccci_kyoto &lt;dbl&gt;, ccci_rep &lt;dbl&gt;,\n#   ccci_unfccc &lt;dbl&gt;, cckp_rain &lt;dbl&gt;, cckp_temp &lt;dbl&gt;, ccl_exepp &lt;dbl&gt;,\n#   ccl_leglp &lt;dbl&gt;, ccl_lpp &lt;dbl&gt;, ccl_mitlpp &lt;dbl&gt;, ccl_nexep &lt;dbl&gt;,\n#   ccl_nlegl &lt;dbl&gt;, ccl_nlp &lt;dbl&gt;, ccl_nmitlp &lt;dbl&gt;, edgar_bc &lt;dbl&gt;,\n#   edgar_ch4 &lt;dbl&gt;, edgar_co &lt;dbl&gt;, edgar_co2gdp &lt;dbl&gt;, edgar_co2pc &lt;dbl&gt;, …",
    "crumbs": [
      "Manipulating and describing data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating data</span>"
    ]
  },
  {
    "objectID": "session02/0201_manipulate.html#introduction-to-dplyr-functions",
    "href": "session02/0201_manipulate.html#introduction-to-dplyr-functions",
    "title": "\n4  Manipulating data\n",
    "section": "",
    "text": "4.1.1 Count the observations of groups with count()\n\nOne basic operation in data manipulation is to count the number of observations of different values in a variable. The dplyr::count() function is used for this purpose.\nIn Exercise 1, we observed that the qog dataset has a country-year structure. For each country, there is a series of indicators, with one value per year. The dataset includes a year variable and a cname variable representing the country.\nWe might want to know how many country observations we have for each year. To do this, we can use count() with the year variable, that will give us the number of observations for each year. If we look at the results, we see that the dataset has observations from 1946 to 2020 with an increasing number of countries in the dataset over time.\n\ncount(qog, year)\n\n# A tibble: 75 × 2\n    year     n\n   &lt;dbl&gt; &lt;int&gt;\n 1  1946    75\n 2  1947    76\n 3  1948    82\n 4  1949    85\n 5  1950    88\n 6  1951    88\n 7  1952    89\n 8  1953    89\n 9  1954    91\n10  1955    94\n# ℹ 65 more rows\n\ntable(qog$year) # Alternative way to do it\n\n\n1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 \n  75   76   82   85   88   88   89   89   91   94   96   97   97   98  103  118 \n1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 \n 119  125  127  131  135  138  141  143  144  146  149  149  151  154  160  160 \n1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 \n 160  165  166  167  168  168  170  170  170  172  172  172  172  173  189  192 \n1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 \n 192  193  193  193  193  193  193  193  194  194  194  194  195  195  195  195 \n2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 \n 195  195  195  195  195  194  194  194  194  194  194 \n\n\nIf we want to cross the year and cname variables, we can use the count() function with both variables. This will give us the number of observations for each year and country. In this case, we see that we have only one observation for each country-year combination.\n\ncount(qog, year, cname)\n\n# A tibble: 11,722 × 3\n    year cname                                n\n   &lt;dbl&gt; &lt;chr&gt;                            &lt;int&gt;\n 1  1946 Afghanistan                          1\n 2  1946 Albania                              1\n 3  1946 Andorra                              1\n 4  1946 Antigua and Barbuda                  1\n 5  1946 Argentina                            1\n 6  1946 Australia                            1\n 7  1946 Belgium                              1\n 8  1946 Bhutan                               1\n 9  1946 Bolivia (Plurinational State of)     1\n10  1946 Brazil                               1\n# ℹ 11,712 more rows\n\n\n\n4.1.2 filter() observations\nWe may want to use only a subset of countries and get a smaller versions of the dataset. And the tidyverse has one for this, which is called filter() We want to select specific rows/observations of the dataset based on a specific conditions. To filter, we will use extensively boolean operators.\n\n\nOperator\nDescription\n\n\n\n==\nequal\n\n\n!=\nnot equal\n\n\n&lt;\nless than\n\n\n&lt;=\nless than or equal\n\n\n&gt;\ngreater than\n\n\n&gt;=\ngreater than or equal\n\n\n&\nand\n\n\n|\nor\n\n\n!\nnot\n\n\n%in%\nin the set\n\n\n\nFor instance, I might be only interested in environmental indicators for France. In that case I could filter the whole dataset with only the observations that has France as country variable.\n\nfilter(qog, cname == \"France\")\n\n# A tibble: 75 × 414\n   cname  ccode  year cname_qog      ccode_qog ccodealp ccodealp_year ccodecow\n   &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;\n 1 France   250  1963 France (1963-)       250 FRA      FRA63              220\n 2 France   250  1964 France (1963-)       250 FRA      FRA64              220\n 3 France   250  1965 France (1963-)       250 FRA      FRA65              220\n 4 France   250  1966 France (1963-)       250 FRA      FRA66              220\n 5 France   250  1967 France (1963-)       250 FRA      FRA67              220\n 6 France   250  1968 France (1963-)       250 FRA      FRA68              220\n 7 France   250  1969 France (1963-)       250 FRA      FRA69              220\n 8 France   250  1970 France (1963-)       250 FRA      FRA70              220\n 9 France   250  1971 France (1963-)       250 FRA      FRA71              220\n10 France   250  1972 France (1963-)       250 FRA      FRA72              220\n# ℹ 65 more rows\n# ℹ 406 more variables: ccodevdem &lt;dbl&gt;, cname_year &lt;chr&gt;, version &lt;chr&gt;,\n#   act_act &lt;dbl&gt;, as_rifr &lt;dbl&gt;, as_ws &lt;dbl&gt;, bti_envc &lt;dbl&gt;, ccci_coop &lt;dbl&gt;,\n#   ccci_em &lt;dbl&gt;, ccci_fin &lt;dbl&gt;, ccci_kyoto &lt;dbl&gt;, ccci_rep &lt;dbl&gt;,\n#   ccci_unfccc &lt;dbl&gt;, cckp_rain &lt;dbl&gt;, cckp_temp &lt;dbl&gt;, ccl_exepp &lt;dbl&gt;,\n#   ccl_leglp &lt;dbl&gt;, ccl_lpp &lt;dbl&gt;, ccl_mitlpp &lt;dbl&gt;, ccl_nexep &lt;dbl&gt;,\n#   ccl_nlegl &lt;dbl&gt;, ccl_nlp &lt;dbl&gt;, ccl_nmitlp &lt;dbl&gt;, edgar_bc &lt;dbl&gt;, …\n\n# If I want to keep all the countries except France\nfilter(qog, cname != \"France\") \n\n# A tibble: 11,647 × 414\n   cname       ccode  year cname_qog   ccode_qog ccodealp ccodealp_year ccodecow\n   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;\n 1 Afghanistan     4  1946 Afghanistan         4 AFG      AFG46              700\n 2 Afghanistan     4  1947 Afghanistan         4 AFG      AFG47              700\n 3 Afghanistan     4  1948 Afghanistan         4 AFG      AFG48              700\n 4 Afghanistan     4  1949 Afghanistan         4 AFG      AFG49              700\n 5 Afghanistan     4  1950 Afghanistan         4 AFG      AFG50              700\n 6 Afghanistan     4  1951 Afghanistan         4 AFG      AFG51              700\n 7 Afghanistan     4  1952 Afghanistan         4 AFG      AFG52              700\n 8 Afghanistan     4  1953 Afghanistan         4 AFG      AFG53              700\n 9 Afghanistan     4  1954 Afghanistan         4 AFG      AFG54              700\n10 Afghanistan     4  1955 Afghanistan         4 AFG      AFG55              700\n# ℹ 11,637 more rows\n# ℹ 406 more variables: ccodevdem &lt;dbl&gt;, cname_year &lt;chr&gt;, version &lt;chr&gt;,\n#   act_act &lt;dbl&gt;, as_rifr &lt;dbl&gt;, as_ws &lt;dbl&gt;, bti_envc &lt;dbl&gt;, ccci_coop &lt;dbl&gt;,\n#   ccci_em &lt;dbl&gt;, ccci_fin &lt;dbl&gt;, ccci_kyoto &lt;dbl&gt;, ccci_rep &lt;dbl&gt;,\n#   ccci_unfccc &lt;dbl&gt;, cckp_rain &lt;dbl&gt;, cckp_temp &lt;dbl&gt;, ccl_exepp &lt;dbl&gt;,\n#   ccl_leglp &lt;dbl&gt;, ccl_lpp &lt;dbl&gt;, ccl_mitlpp &lt;dbl&gt;, ccl_nexep &lt;dbl&gt;,\n#   ccl_nlegl &lt;dbl&gt;, ccl_nlp &lt;dbl&gt;, ccl_nmitlp &lt;dbl&gt;, edgar_bc &lt;dbl&gt;, …\n\n# Filter for multiple countries\nfilter(qog, cname %in% c(\"France\", \"Norway\", \"Spain\", \"Denmark\"))\n\n# A tibble: 300 × 414\n   cname   ccode  year cname_qog ccode_qog ccodealp ccodealp_year ccodecow\n   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;            &lt;dbl&gt;\n 1 Denmark   208  1946 Denmark         208 DNK      DNK46              390\n 2 Denmark   208  1947 Denmark         208 DNK      DNK47              390\n 3 Denmark   208  1948 Denmark         208 DNK      DNK48              390\n 4 Denmark   208  1949 Denmark         208 DNK      DNK49              390\n 5 Denmark   208  1950 Denmark         208 DNK      DNK50              390\n 6 Denmark   208  1951 Denmark         208 DNK      DNK51              390\n 7 Denmark   208  1952 Denmark         208 DNK      DNK52              390\n 8 Denmark   208  1953 Denmark         208 DNK      DNK53              390\n 9 Denmark   208  1954 Denmark         208 DNK      DNK54              390\n10 Denmark   208  1955 Denmark         208 DNK      DNK55              390\n# ℹ 290 more rows\n# ℹ 406 more variables: ccodevdem &lt;dbl&gt;, cname_year &lt;chr&gt;, version &lt;chr&gt;,\n#   act_act &lt;dbl&gt;, as_rifr &lt;dbl&gt;, as_ws &lt;dbl&gt;, bti_envc &lt;dbl&gt;, ccci_coop &lt;dbl&gt;,\n#   ccci_em &lt;dbl&gt;, ccci_fin &lt;dbl&gt;, ccci_kyoto &lt;dbl&gt;, ccci_rep &lt;dbl&gt;,\n#   ccci_unfccc &lt;dbl&gt;, cckp_rain &lt;dbl&gt;, cckp_temp &lt;dbl&gt;, ccl_exepp &lt;dbl&gt;,\n#   ccl_leglp &lt;dbl&gt;, ccl_lpp &lt;dbl&gt;, ccl_mitlpp &lt;dbl&gt;, ccl_nexep &lt;dbl&gt;,\n#   ccl_nlegl &lt;dbl&gt;, ccl_nlp &lt;dbl&gt;, ccl_nmitlp &lt;dbl&gt;, edgar_bc &lt;dbl&gt;, …\n\n# Filter for countries and year and save in a new object ! \nqog_subset &lt;- filter(qog, cname %in% c(\"France\", \"Norway\", \"Spain\", \"Denmark\"), year &gt; 1990)\n\ncount(qog_subset, cname)\n\n# A tibble: 4 × 2\n  cname       n\n  &lt;chr&gt;   &lt;int&gt;\n1 Denmark    30\n2 France     30\n3 Norway     30\n4 Spain      30\n\n\nOften however, we need several operations to be done together. To do so with the tidyverse functions, we can use something that is called the pipe : |&gt;. You will quickly understand what the pipe is, we use it to chain instructions just as in a recipe. Depending on the version of R, you might also use/see this %&gt;%. The shortcut for it is Ctrl + Shift + M or Cmd + Shift + M on Mac.\nLet’s say we want to count the number of observations we have on the variable wvs_pedp that measure the share of the population participating in environmental protests for Sweden. We can use the pipe to do it by chaining the filter() and count() functions rather than doing it separately in different steps.\n\nqog |&gt; \n  # Keep only countries \n  filter(cname == \"Sweden\") |&gt; \n  # Count the number of observations for each country\n  count(wvs_pedp) # Use Sort = TRUE if you want to sort the results\n\n# A tibble: 2 × 2\n  wvs_pedp     n\n     &lt;dbl&gt; &lt;int&gt;\n1     5.22     1\n2    NA       74\n\n\n\n4.1.3 Your turn\nCount the countries and year where the share of the population participating in environmental protests was greater than 10 (measured by the wvs_pedp variable).",
    "crumbs": [
      "Manipulating and describing data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating data</span>"
    ]
  },
  {
    "objectID": "session02/0201_manipulate.html#select-variables",
    "href": "session02/0201_manipulate.html#select-variables",
    "title": "\n4  Manipulating data\n",
    "section": "\n4.2 select() variables",
    "text": "4.2 select() variables\nWhile filter() is useful for keeping only certain groups of rows, select() is used, as its name suggests, to select certain variables (columns) from our dataframe.\nLet’s say I’m interested in CO2 emissions per capita, their overall level and how they vary over time and by country. For this, I would need only three variables that are present in the dataset: year, cname and the variable wdi_co2 which comes from the World Bank’s World Development Indicators. To do this, I use select() and just specify which variables of the dataset I want to select.\n\nqog_subset |&gt; \n  select(cname, year,  wdi_co2)\n\n# A tibble: 120 × 3\n   cname    year wdi_co2\n   &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1 Denmark  1991   11.7 \n 2 Denmark  1992   10.5 \n 3 Denmark  1993   11.0 \n 4 Denmark  1994   11.7 \n 5 Denmark  1995   10.9 \n 6 Denmark  1996   13.7 \n 7 Denmark  1997   11.6 \n 8 Denmark  1998   11.2 \n 9 Denmark  1999   10.4 \n10 Denmark  2000    9.61\n# ℹ 110 more rows",
    "crumbs": [
      "Manipulating and describing data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating data</span>"
    ]
  },
  {
    "objectID": "session02/0201_manipulate.html#calculating-statistics-by-group-with-group_by-and-summarise",
    "href": "session02/0201_manipulate.html#calculating-statistics-by-group-with-group_by-and-summarise",
    "title": "\n4  Manipulating data\n",
    "section": "\n4.3 Calculating statistics by group with group_by() and summarise()\n",
    "text": "4.3 Calculating statistics by group with group_by() and summarise()\n\nTo compute a first set of descriptive statistics, we could look at the central indicators of the co2 emissions variable (wdi_co2).\n\nmean(qog_subset$wdi_co2, na.rm = TRUE) # Compute the mean\n\n[1] 7.666003\n\nmedian(qog_subset$wdi_co2, na.rm = TRUE) # Compute the median\n\n[1] 7.496984\n\nsd(qog_subset$wdi_co2, na.rm = TRUE) # Compute the standard deviation\n\n[1] 2.003383\n\n\nHowever, we are often interested in how these indicators vary across groups such as country or year. To do so, use the summarise() function in R that allows you to compute new variables by groups. To choose grouping variable, we use first group_by() where we specify for which group we want to compute something. Here I use this function to compute the mean, the median, the standard deviation and the first and third quartile of co2 emissions per capita for each country. This gives us a new tibble with all of the summary information.\n\nqog_stats &lt;- qog |&gt; \n   group_by(cname) |&gt; \n  summarise(mean_co2 = mean(wdi_co2, na.rm = TRUE), \n            median_co2 = median(wdi_co2, na.rm = TRUE),\n            sd_co2 = sd(wdi_co2, na.rm = TRUE))\n\nqog_stats\n\n# A tibble: 204 × 4\n   cname               mean_co2 median_co2 sd_co2\n   &lt;chr&gt;                  &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n 1 Afghanistan            0.148      0.135 0.0892\n 2 Albania                1.65       1.56  0.649 \n 3 Algeria                2.62       2.98  0.981 \n 4 Andorra                6.82       6.75  0.700 \n 5 Angola                 0.754      0.582 0.354 \n 6 Antigua and Barbuda    4.71       4.61  0.986 \n 7 Argentina              3.69       3.67  0.615 \n 8 Armenia                1.37       1.46  0.386 \n 9 Australia             14.6       15.4   2.71  \n10 Austria                7.19       7.39  1.08  \n# ℹ 194 more rows\n\n\nIt is also possible to sort the results to gain a clearer idea of which countries have the highest average CO2 emissions per capita. To achieve this, we utilize the arrange() function, specifying the variable by which we intend to sort.\n\nqog_stats |&gt; \n  arrange(-median_co2)\n\n# A tibble: 204 × 4\n   cname                    mean_co2 median_co2 sd_co2\n   &lt;chr&gt;                       &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n 1 Qatar                        51.5       54.6  14.8 \n 2 United Arab Emirates         33.6       29.2  14.0 \n 3 Kuwait                       28.1       27.4  12.9 \n 4 Luxembourg                   27.3       25.0   7.41\n 5 Bahrain                      23.9       23.7   2.71\n 6 United States of America     19.0       19.3   1.76\n 7 Brunei Darussalam            17.4       16.5   4.65\n 8 Canada                       15.8       16.2   1.84\n 9 Australia                    14.6       15.4   2.71\n10 Trinidad and Tobago          17.8       15.3   9.86\n# ℹ 194 more rows\n\nqog_stats |&gt; \n  arrange(mean_co2)\n\n# A tibble: 204 × 4\n   cname                    mean_co2 median_co2 sd_co2\n   &lt;chr&gt;                       &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;\n 1 Burundi                    0.0324     0.0354 0.0112\n 2 Chad                       0.0516     0.0464 0.0186\n 3 Ethiopia                   0.0574     0.0546 0.0264\n 4 Rwanda                     0.0624     0.0645 0.0298\n 5 Central African Republic   0.0678     0.0643 0.0154\n 6 Mali                       0.0679     0.0523 0.0402\n 7 Niger                      0.0722     0.0637 0.0339\n 8 Burkina Faso               0.0725     0.0662 0.0447\n 9 Somalia                    0.0762     0.0620 0.0346\n10 Uganda                     0.0797     0.0632 0.0353\n# ℹ 194 more rows",
    "crumbs": [
      "Manipulating and describing data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating data</span>"
    ]
  },
  {
    "objectID": "session02/0201_manipulate.html#your-turn-1",
    "href": "session02/0201_manipulate.html#your-turn-1",
    "title": "\n4  Manipulating data\n",
    "section": "\n4.4 Your turn",
    "text": "4.4 Your turn\nWhen were the CO2 emissions per capita the lowest in Saudi Arabia?\n\n4.4.1 Mutate\nWe can also create new variables based on other ones with mutate(). Let’s say I want to compute the growth rate of co2 emissions per capita every year. For this, I will use mutate() to create new variables.\n\nqog |&gt; \n  select(cname, year, wdi_fossil) |&gt; \n  mutate(dataset = \"QOG dataset\")\n\n# A tibble: 11,722 × 4\n   cname        year wdi_fossil dataset    \n   &lt;chr&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;      \n 1 Afghanistan  1946         NA QOG dataset\n 2 Afghanistan  1947         NA QOG dataset\n 3 Afghanistan  1948         NA QOG dataset\n 4 Afghanistan  1949         NA QOG dataset\n 5 Afghanistan  1950         NA QOG dataset\n 6 Afghanistan  1951         NA QOG dataset\n 7 Afghanistan  1952         NA QOG dataset\n 8 Afghanistan  1953         NA QOG dataset\n 9 Afghanistan  1954         NA QOG dataset\n10 Afghanistan  1955         NA QOG dataset\n# ℹ 11,712 more rows\n\n\nTo compute the growth rate, we need for each year the emissions per capita of that year and those from the previous year, which I access with lag().\n\nqog_co2_growth &lt;- qog |&gt;\n  filter(cname == \"France\") |&gt;\n  select(cname, year, wdi_co2) |&gt; \n  mutate(co2_lag = lag(wdi_co2),\n        co2_growth = (wdi_co2 - co2_lag) / co2_lag*100)\n\nqog_co2_growth \n\n# A tibble: 75 × 5\n   cname   year wdi_co2 co2_lag co2_growth\n   &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt;\n 1 France  1963    6.88   NA        NA    \n 2 France  1964    7.01    6.88      2.02 \n 3 France  1965    7.06    7.01      0.695\n 4 France  1966    6.90    7.06     -2.32 \n 5 France  1967    7.33    6.90      6.19 \n 6 France  1968    7.52    7.33      2.59 \n 7 France  1969    8.01    7.52      6.64 \n 8 France  1970    8.45    8.01      5.42 \n 9 France  1971    8.83    8.45      4.50 \n10 France  1972    9.11    8.83      3.13 \n# ℹ 65 more rows",
    "crumbs": [
      "Manipulating and describing data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating data</span>"
    ]
  },
  {
    "objectID": "session02/0201_manipulate.html#recode-values-with-case_when",
    "href": "session02/0201_manipulate.html#recode-values-with-case_when",
    "title": "\n4  Manipulating data\n",
    "section": "\n4.5 Recode values with case_when\n",
    "text": "4.5 Recode values with case_when\n\nMutate() is also widely used to recode variable. Here we create a new trajectory variable and we use case_when() to recode whether there co2_emissions are growing or not for a given year.\n\nqog_co2_growth &lt;- qog_co2_growth |&gt; \n  filter(cname == \"France\") |&gt;\n  mutate(\n    trajectory = case_when(\n      co2_growth &gt; 0 ~ \"Bad\",\n      co2_growth &lt; 0 ~ \"Good\"\n    )\n  )\nqog_co2_growth\n\n# A tibble: 75 × 6\n   cname   year wdi_co2 co2_lag co2_growth trajectory\n   &lt;chr&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;      &lt;dbl&gt; &lt;chr&gt;     \n 1 France  1963    6.88   NA        NA     &lt;NA&gt;      \n 2 France  1964    7.01    6.88      2.02  Bad       \n 3 France  1965    7.06    7.01      0.695 Bad       \n 4 France  1966    6.90    7.06     -2.32  Good      \n 5 France  1967    7.33    6.90      6.19  Bad       \n 6 France  1968    7.52    7.33      2.59  Bad       \n 7 France  1969    8.01    7.52      6.64  Bad       \n 8 France  1970    8.45    8.01      5.42  Bad       \n 9 France  1971    8.83    8.45      4.50  Bad       \n10 France  1972    9.11    8.83      3.13  Bad       \n# ℹ 65 more rows\n\nqog_co2_growth |&gt; \n  count(trajectory)\n\n# A tibble: 3 × 2\n  trajectory     n\n  &lt;chr&gt;      &lt;int&gt;\n1 Bad           22\n2 Good          31\n3 &lt;NA&gt;          22\n\n\n\n4.5.1 Your turn !\nCreate a century variable that indicates whether the year is in the 20th or 21st century. Find the countries that have the highest total number of deaths due to natural disasters for each century, as measured by the emdat_ndeath variable.",
    "crumbs": [
      "Manipulating and describing data",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manipulating data</span>"
    ]
  },
  {
    "objectID": "session02/0202_reshape.html",
    "href": "session02/0202_reshape.html",
    "title": "\n5  Reshaping data\n",
    "section": "",
    "text": "5.1 Reshaping with pivot_longer() and pivot_wider()\nDatasets can be in long (many rows, few columns) or wide formats (few rows, many columns). Depending on our unit of analysis, we can reshape our datasets into different formats. In the german_polls dataset, the vote intentions for each party are stored in different columns. However, we could also structure the data with one column for parties and another for voting intention.\ngerman_long &lt;- german_polls |&gt;\n  pivot_longer(\n    # Select which columns to pivot\n    cols = c(Union, FDP, LINKE, SPD, PIRATEN, AfD, GRUENE),\n    # Choose a name for the new column with all of the parties\n    names_to = \"party\",\n    # Choose a name for the new column with the vote intentions\n    values_to = \"intention\"\n  )\n\ngerman_long\n\n# A tibble: 24,115 × 6\n   date       firm      date_from  sample_size party   intention\n   &lt;date&gt;     &lt;chr&gt;     &lt;date&gt;           &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1 2005-09-22 FG Wahlen 2005-09-20        1345 Union          37\n 2 2005-09-22 FG Wahlen 2005-09-20        1345 FDP             8\n 3 2005-09-22 FG Wahlen 2005-09-20        1345 LINKE           8\n 4 2005-09-22 FG Wahlen 2005-09-20        1345 SPD            35\n 5 2005-09-22 FG Wahlen 2005-09-20        1345 PIRATEN        NA\n 6 2005-09-22 FG Wahlen 2005-09-20        1345 AfD            NA\n 7 2005-09-22 FG Wahlen 2005-09-20        1345 GRUENE          8\n 8 2005-10-06 FG Wahlen 2005-10-04        1259 Union          39\n 9 2005-10-06 FG Wahlen 2005-10-04        1259 FDP             7\n10 2005-10-06 FG Wahlen 2005-10-04        1259 LINKE           9\n# ℹ 24,105 more rows\ngerman_long |&gt; \n  group_by(date, party) |&gt; \n  summarise(intention = mean(intention, na.rm = T))\n\n`summarise()` has grouped output by 'date'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 18,788 × 3\n# Groups:   date [2,684]\n   date       party   intention\n   &lt;date&gt;     &lt;chr&gt;       &lt;dbl&gt;\n 1 2005-09-22 AfD           NaN\n 2 2005-09-22 FDP             8\n 3 2005-09-22 GRUENE          8\n 4 2005-09-22 LINKE           8\n 5 2005-09-22 PIRATEN       NaN\n 6 2005-09-22 SPD            35\n 7 2005-09-22 Union          37\n 8 2005-10-06 AfD           NaN\n 9 2005-10-06 FDP             7\n10 2005-10-06 GRUENE          7\n# ℹ 18,778 more rows\nWe can also reshape the dataset to put it back on wide format.\ngerman_wide &lt;- german_long |&gt; \n  pivot_wider(\n    names_from = party,\n    values_from = intention\n  ) |&gt; \n  unnest()\n\ngerman_wide\n\n# A tibble: 3,445 × 11\n   date       firm  date_from  sample_size Union   FDP LINKE   SPD PIRATEN   AfD\n   &lt;date&gt;     &lt;chr&gt; &lt;date&gt;           &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 2005-09-22 FG W… 2005-09-20        1345    37     8     8    35      NA    NA\n 2 2005-10-06 FG W… 2005-10-04        1259    39     7     9    34      NA    NA\n 3 2005-10-13 FG W… 2005-10-11        1280    38     8     8    35      NA    NA\n 4 2005-10-27 FG W… 2005-10-25        1269    37     9     8    35      NA    NA\n 5 2005-11-10 FG W… 2005-11-08        1230    36     9     9    33      NA    NA\n 6 2005-11-24 FG W… 2005-11-22        1298    37     9     8    34      NA    NA\n 7 2005-12-08 FG W… 2005-12-06        1237    38     9     8    34      NA    NA\n 8 2006-01-12 FG W… 2006-01-10        1249    39     9     8    33      NA    NA\n 9 2006-01-26 FG W… 2006-01-24        1279    41     8     8    33      NA    NA\n10 2006-02-16 FG W… 2006-02-14        1260    41     8     7    32      NA    NA\n# ℹ 3,435 more rows\n# ℹ 1 more variable: GRUENE &lt;dbl&gt;",
    "crumbs": [
      "Manipulating and describing data",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Reshaping data</span>"
    ]
  },
  {
    "objectID": "session02/0202_reshape.html#combining-with-bind_rows",
    "href": "session02/0202_reshape.html#combining-with-bind_rows",
    "title": "\n5  Reshaping data\n",
    "section": "\n5.2 Combining with bind_rows",
    "text": "5.2 Combining with bind_rows\nIn many cases, you want to combine datasets having the same structure and mostly the same variables but different observations (rows). It may be the same data from different years, different countries etc. Here, I want to combine the data I have on Germany with similar data on spanish polls. To do so, I first, import this dataset and convert it also to a long format.\n\nspain_polls &lt;- read_csv(\"data/spanish_polls.csv\")\n\nRows: 1414 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (1): firm\ndbl  (19): PP, PSOE, ERC, PNVEAJ, CC, BNG, Cs, VOX, Podemos, EHBildu, PACMA,...\ndate  (2): date, date_from\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nspain_long &lt;- spain_polls |&gt;\n  pivot_longer(\n    # Select which columns NOT to pivot\n    cols = -c(date, firm, date_from, sample_size),\n    # Choose a name for the new column with all of the parties\n    names_to = \"party\",\n    # Choose a name for the new column with the vote intentions\n    values_to = \"intention\"\n  )\n\nspain_long\n\n# A tibble: 25,452 × 6\n   date       firm        date_from  sample_size party   intention\n   &lt;date&gt;     &lt;chr&gt;       &lt;date&gt;           &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1 2011-12-15 Metroscopia 2011-12-14        1000 PP           44.9\n 2 2011-12-15 Metroscopia 2011-12-14        1000 PSOE         28.4\n 3 2011-12-15 Metroscopia 2011-12-14        1000 ERC          NA  \n 4 2011-12-15 Metroscopia 2011-12-14        1000 PNVEAJ       NA  \n 5 2011-12-15 Metroscopia 2011-12-14        1000 CC           NA  \n 6 2011-12-15 Metroscopia 2011-12-14        1000 BNG          NA  \n 7 2011-12-15 Metroscopia 2011-12-14        1000 Cs           NA  \n 8 2011-12-15 Metroscopia 2011-12-14        1000 VOX          NA  \n 9 2011-12-15 Metroscopia 2011-12-14        1000 Podemos      NA  \n10 2011-12-15 Metroscopia 2011-12-14        1000 EHBildu      NA  \n# ℹ 25,442 more rows\n\n\nMy goal now is to combine them together. But before, I add a country variable on the two datasets to keep track of which country the data is from.\n\nspain_long &lt;- spain_long |&gt; mutate(country = \"Spain\")\ngerman_long &lt;- german_long |&gt; mutate(country = \"Germany\")\n\nNow, I combine the two datasets with the bind_rows function that comes from the dplyr package. The functions allows you to combine two datasets with the same structure by stacking them on top of each other. The resulting dataset will have all the rows from the first dataset, followed by all the rows from the second dataset. The datasets will be combined by columns, so the columns must have the same names and types.\n\npolls &lt;- bind_rows(spain_long, german_long)",
    "crumbs": [
      "Manipulating and describing data",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Reshaping data</span>"
    ]
  },
  {
    "objectID": "session04/04_relationships.html",
    "href": "session04/04_relationships.html",
    "title": "\n6  Testing relationships\n",
    "section": "",
    "text": "6.1 Joining datasets\nIn many instances, we encounter data originating from different datasets that share common variables. In this context, I have two datasets concerning French voters. The first dataset is an annual survey that comprises information regarding the socio-demographic characteristics of the respondents. The second dataset is a panel survey conducted during the most recent presidential election, providing data about the voting choices of the respondents. Both datasets pertain to the same individuals and include a unique identifier (UID) that enables us to correlate the two datasets. Our objective is to amalgamate these two datasets into a single one that encompasses both the socio-demographic characteristics and the voting choices of the respondents. To accomplish this, we must merge the two datasets. Note that this is different from binding datasets together as we already did before with bind_rows() where we binded datasets having the same columns but not the same observations.\nLet’s start by loading a bunch of packages we will use today and the two datasets I just described.\n# Load packages (install.packages(\"package_name\") if you don't have them installed yet\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ─────────────────── tidyverse 2.0.0.9000 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(haven)\nlibrary(labelled)\nlibrary(broom)\n\nWarning: package 'broom' was built under R version 4.3.3\n\nlibrary(infer)\n\n\n# Load the data\n\nfes &lt;- read_dta(\"fes2022v4bis.dta\")\n\nannual &lt;- read_dta(\"elipss_annual.dta\")\nTo join them together, we will use the left_join() function from the dplyr package. This function is used to combine two datasets by matching the values of one or more variables in each dataset. The first dataset is the one that we want to keep all the observations from. The second dataset is the one that we want to add observations from. In our case, we want to keep all the observations from the fes dataset and add the variables from the annual dataset. The by argument specifies the variable(s) that will be used to match observations in the two datasets. In our case, we will use the UID variable that is common to both datasets.\nfes2022 &lt;- left_join(fes, annual, by = c(\"UID\")) # Join the two datasets by the UID variable\nThe left_join() function is indeed one of the most commonly used methods for joining data in R. However, it’s important to note that there are several other types of joins that can be applied, each with its own specific use case. If you’d like to delve deeper into how these joins work, I recommend checking out theR for data science book’s explanation of these concepts. These diagrams below shows the different types of joins that can be performed with the dplyr package.\nIf we check the names of our columns, we can now see that we have in our new dataset, the columns of both previous datasets with the same number of observations.\ncolnames(fes2022)\n\n  [1] \"UID\"                   \"fes4_Q01\"              \"fes4_Q02a\"            \n  [4] \"fes4_Q02b\"             \"fes4_Q02c\"             \"fes4_Q02d\"            \n  [7] \"fes4_Q02e\"             \"fes4_Q02f\"             \"fes4_Q02g\"            \n [10] \"fes4_Q03\"              \"fes4_Q04a\"             \"fes4_Q04b\"            \n [13] \"fes4_Q04c\"             \"fes4_Q04d\"             \"fes4_Q04_DO_Q04a\"     \n [16] \"fes4_Q04_DO_Q04b\"      \"fes4_Q04_DO_Q04c\"      \"fes4_Q04_DO_Q04d\"     \n [19] \"fes4_Q05a\"             \"fes4_Q05b\"             \"fes4_Q05c\"            \n [22] \"fes4_Q05_DO_Q05a\"      \"fes4_Q05_DO_Q05b\"      \"fes4_Q05_DO_Q05c\"     \n [25] \"fes4_Q06\"              \"fes4_Q07a\"             \"fes4_Q07b\"            \n [28] \"fes4_Q07d\"             \"fes4_Q07e\"             \"fes4_Q07f\"            \n [31] \"fes4_Q07g\"             \"fes4_Q07_DO_Q07a\"      \"fes4_Q07_DO_Q07b\"     \n [34] \"fes4_Q07_DO_Q07c\"      \"fes4_Q07_DO_Q07d\"      \"fes4_Q07_DO_Q07e\"     \n [37] \"fes4_Q07_DO_Q07f\"      \"fes4_Q07_DO_Q07g\"      \"fes4_Q08a\"            \n [40] \"fes4_Q08b\"             \"fes4_Q09\"              \"fes4_Q10p1_a\"         \n [43] \"fes4_Q10p1_b\"          \"fes4_Q10p2_a\"          \"fes4_Q10p2_b\"         \n [46] \"fes4_Q10lh1_a\"         \"fes4_Q10lh1_c\"         \"fes4_Q11a\"            \n [49] \"fes4_Q11b\"             \"fes4_Q11c\"             \"fes4_Q12\"             \n [52] \"fes4_Q13\"              \"fes4_Q14a\"             \"fes4_Q14b\"            \n [55] \"fes4_Q14c\"             \"fes4_Q14d\"             \"fes4_Q15\"             \n [58] \"fes4_Q16a\"             \"fes4_Q16b\"             \"fes4_Q16c\"            \n [61] \"fes4_Q16d\"             \"fes4_Q16e\"             \"fes4_Q16f\"            \n [64] \"fes4_Q16g\"             \"fes4_Q16h\"             \"fes4_Q17a\"            \n [67] \"fes4_Q17b\"             \"fes4_Q17c\"             \"fes4_Q17d\"            \n [70] \"fes4_Q17e\"             \"fes4_Q17f\"             \"fes4_Q18a\"            \n [73] \"fes4_Q18b\"             \"fes4_Q18c\"             \"fes4_Q18d\"            \n [76] \"fes4_Q18e\"             \"fes4_Q18f\"             \"fes4_Q18g\"            \n [79] \"fes4_Q18h\"             \"fes4_Q19\"              \"fes4_Q22\"             \n [82] \"fes4_Q23a\"             \"fes4_Q23b\"             \"fes4_Q23c\"            \n [85] \"fes4_Q23d\"             \"fes4_Q24\"              \"fes4_Q25a\"            \n [88] \"fes4_Q25b\"             \"fes4_Q26a\"             \"fes4_Q26b\"            \n [91] \"fes4_Q27a\"             \"fes4_Q27b\"             \"fes4_Q27c\"            \n [94] \"fes4_Q27d\"             \"fes4_bloc_q25_DO_Q25a\" \"fes4_bloc_q25_DO_Q25b\"\n [97] \"fes4_bloc_q26_DO_Q26a\" \"fes4_bloc_q26_DO_Q26b\" \"cal_AGE\"              \n[100] \"cal_DIPL\"              \"cal_SEXE\"              \"cal_TUU\"              \n[103] \"cal_ZEAT\"              \"cal_AGE1\"              \"cal_AGE2\"             \n[106] \"cal_NAT\"               \"cal_DIPL2\"             \"panel\"                \n[109] \"VAGUE\"                 \"POIDS_fes4\"            \"PDSPLT1_fes4\"         \n[112] \"PDSPLT2_fes4\"          \"POIDS_INIT\"            \"PDSPLT_INIT1\"         \n[115] \"PDSPLT_INIT2\"          \"eayy_a1\"               \"eayy_a2a_rec\"         \n[118] \"eayy_a2a_rec2\"         \"eayy_a3_rec\"           \"eayy_a3b_rec\"         \n[121] \"eayy_a3c_rec\"          \"eayy_a3d\"              \"eayy_a3e_rec\"         \n[124] \"eayy_a4\"               \"eayy_a5\"               \"eayy_a5c_rec\"         \n[127] \"eayy_b1\"               \"eayy_b1_rev\"           \"eayy_b1_sc\"           \n[130] \"eayy_b1_sccjt\"         \"eayy_b10a\"             \"eayy_b10aa\"           \n[133] \"eayy_b10acjt\"          \"eayy_b11\"              \"eayy_b11cjt\"          \n[136] \"eayy_b18_rec\"          \"eayy_b18c\"             \"eayy_b18ccjt\"         \n[139] \"eayy_b18cjt_rec\"       \"eayy_b1a\"              \"eayy_b1acjt\"          \n[142] \"eayy_b1b\"              \"eayy_b1bcjt\"           \"eayy_b1cjt\"           \n[145] \"eayy_b1cjt_rev\"        \"eayy_b2_11a_rec\"       \"eayy_b2_11acjt_rec\"   \n[148] \"eayy_b2_rec\"           \"eayy_b25\"              \"eayy_b25_rec\"         \n[151] \"eayy_b25cjt_rec\"       \"eayy_b2cjt_rec\"        \"eayy_b4_rec\"          \n[154] \"eayy_b4cjt_rec\"        \"eayy_b5\"               \"eayy_b5_rec\"          \n[157] \"eayy_b5a\"              \"eayy_b5a_rec\"          \"eayy_b5acjt\"          \n[160] \"eayy_b5c\"              \"eayy_b5c_rec\"          \"eayy_b5ccjt\"          \n[163] \"eayy_b5d_rec\"          \"eayy_b6a_12a_rec\"      \"eayy_b6a_rec\"         \n[166] \"eayy_b6b_12b_rec\"      \"eayy_b6b_rec\"          \"eayy_b7b_rec\"         \n[169] \"eayy_b8_rec\"           \"eayy_b8cjt_rec\"        \"eayy_c1_rec\"          \n[172] \"eayy_c1jeu\"            \"eayy_c8\"               \"eayy_c8a_rec\"         \n[175] \"eayy_c8b_rec\"          \"eayy_d1\"               \"eayy_d1_rec\"          \n[178] \"eayy_d2\"               \"eayy_d2_rev\"           \"eayy_d3\"              \n[181] \"eayy_d4_rec\"           \"eayy_d5_rec\"           \"eayy_d6\"              \n[184] \"eayy_d7_1\"             \"eayy_d7_10\"            \"eayy_d7_2\"            \n[187] \"eayy_d7_3\"             \"eayy_d7_4\"             \"eayy_d7_5\"            \n[190] \"eayy_d7_6\"             \"eayy_d7_7\"             \"eayy_d7_8\"            \n[193] \"eayy_d7_9\"             \"eayy_d7_rev_1\"         \"eayy_d7_rev_10\"       \n[196] \"eayy_d7_rev_11\"        \"eayy_d7_rev_2\"         \"eayy_d7_rev_3\"        \n[199] \"eayy_d7_rev_4\"         \"eayy_d7_rev_5\"         \"eayy_d7_rev_6\"        \n[202] \"eayy_d7_rev_7\"         \"eayy_d7_rev_8\"         \"eayy_d7_rev_9\"        \n[205] \"eayy_e1a_rec\"          \"eayy_e1b_rec\"          \"eayy_e1c_rec\"         \n[208] \"eayy_e1d_rec\"          \"eayy_e1e_rec\"          \"eayy_e1f\"             \n[211] \"eayy_e1f1_rec\"         \"eayy_e1f2_rec\"         \"eayy_e1g_rec\"         \n[214] \"eayy_e1h_rec\"          \"eayy_e1i_rec\"          \"eayy_e1j_rec\"         \n[217] \"eayy_e2a_rec\"          \"eayy_e2auc\"            \"eayy_e2auc_source\"    \n[220] \"eayy_e3a\"              \"eayy_e3b\"              \"eayy_e3c\"             \n[223] \"eayy_e3d\"              \"eayy_e3e\"              \"eayy_e4\"              \n[226] \"eayy_e5\"               \"eayy_e6\"               \"eayy_f1_rec\"          \n[229] \"eayy_f1_rev\"           \"eayy_f1a1\"             \"eayy_f3\"              \n[232] \"eayy_f3_rev\"           \"eayy_f4\"               \"eayy_f6_rec\"          \n[235] \"eayy_f6a\"              \"eayy_f7\"               \"eayy_f7_1\"            \n[238] \"eayy_f7_10\"            \"eayy_f7_11\"            \"eayy_f7_12\"           \n[241] \"eayy_f7_13\"            \"eayy_f7_14\"            \"eayy_f7_15\"           \n[244] \"eayy_f7_2\"             \"eayy_f7_3\"             \"eayy_f7_4\"            \n[247] \"eayy_f7_5\"             \"eayy_f7_6\"             \"eayy_f7_8\"            \n[250] \"eayy_f7_9\"             \"eayy_f7bis_1\"          \"eayy_f7bis_10\"        \n[253] \"eayy_f7bis_11\"         \"eayy_f7bis_12\"         \"eayy_f7bis_13\"        \n[256] \"eayy_f7bis_14\"         \"eayy_f7bis_2\"          \"eayy_f7bis_3\"         \n[259] \"eayy_f7bis_4\"          \"eayy_f7bis_5\"          \"eayy_f7bis_6\"         \n[262] \"eayy_f7bis_7\"          \"eayy_f7bis_8\"          \"eayy_f7bis_9\"         \n[265] \"eayy_f8\"               \"eayy_f9\"               \"eayy_g1\"              \n[268] \"eayy_g1_1\"             \"eayy_g1_2\"             \"eayy_g10\"             \n[271] \"eayy_g2\"               \"eayy_g3a\"              \"eayy_g3b\"             \n[274] \"eayy_g3c\"              \"eayy_g3d\"              \"eayy_g4\"              \n[277] \"eayy_g5\"               \"eayy_g6_1\"             \"eayy_g6_2\"            \n[280] \"eayy_g6_3\"             \"eayy_g6_4\"             \"eayy_h_c11\"           \n[283] \"eayy_h_teo1\"           \"eayy_h1a\"              \"eayy_h4\"              \n[286] \"eayy_i1\"               \"eayy_i13a\"             \"eayy_i13b\"            \n[289] \"eayy_i2\"               \"eayy_i8\"               \"eayy_j1\"              \n[292] \"eayy_k3\"               \"eayy_pcs18\"            \"eayy_pcs6\"            \n[295] \"eayy_pcs6cjt\"          \"eayy_typmen5\"",
    "crumbs": [
      "Testing relationships",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Testing relationships</span>"
    ]
  },
  {
    "objectID": "session04/04_relationships.html#renaming-variables",
    "href": "session04/04_relationships.html#renaming-variables",
    "title": "\n6  Testing relationships\n",
    "section": "\n6.2 Renaming variables",
    "text": "6.2 Renaming variables\nOur examination of the column names also reveals that the variable names are not particularly informative. It can be challenging to discern the specific information represented by each variable. Today, I am interested in the relationship between education levels and voting behavior in the second round of the election. So I rename these two variables with more informative names. I also rename other variables on sympathy towards candidates that I will use late.\n\nfes2022 &lt;- fes2022 |&gt;\n  rename(\n    gender = cal_SEXE, # Gender variable\n    education = cal_DIPL, # Education variable\n    vote_t2 = fes4_Q10p2_b, # Vote at the second round of the election\n    symp_macron = fes4_Q17a, # Sympathy towards Macron \n    symp_lepen = fes4_Q17d, # Sympathy towards Le Pen (Far right)\n    symp_zemmour = fes4_Q17b, # Sympathy towards Zemmour (Far right)\n    symp_melenchon = fes4_Q17c, # Sympathy towards Mélenchon (Radical left)\n    symp_jadot = fes4_Q17f # Sympathy towards Jadot (Greens)\n  )",
    "crumbs": [
      "Testing relationships",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Testing relationships</span>"
    ]
  },
  {
    "objectID": "session04/04_relationships.html#recoding-variables",
    "href": "session04/04_relationships.html#recoding-variables",
    "title": "\n6  Testing relationships\n",
    "section": "\n6.3 Recoding variables",
    "text": "6.3 Recoding variables\nIn addition to renaming variables, we may also need to recode variables. Let’s look at these two variables. Education is coded in four different categories but the actual values are numbers from 1 to 4 and we migh want a categorical variable with the labels instead. Moreoever, I also want to change the order of the categories to have the less educated people first and the more educated people last.\n\nfes2022 |&gt; \n  count(education)\n\n# A tibble: 4 × 2\n  education                           n\n  &lt;dbl+lbl&gt;                       &lt;int&gt;\n1 1 [Diplôme supérieur]             829\n2 2 [BAC et BAC+2]                  286\n3 3 [CAP + BEPC]                    352\n4 4 [Sans diplôme et non déclaré]   108\n\nfes2022 &lt;- fes2022 |&gt;\n  mutate(\n    # Convert the education variable values by their labels\n    education = unlabelled(education) |&gt;\n      # Change the order of the categories\n      fct_relevel(\n        \"Sans diplôme et non déclaré\",\n        \"CAP + BEPC\",\n        \"BAC et BAC+2\",\n        \"Diplôme supérieur\"\n      )\n  )\nfes2022 |&gt; \n  count(education)\n\n# A tibble: 4 × 2\n  education                       n\n  &lt;fct&gt;                       &lt;int&gt;\n1 Sans diplôme et non déclaré   108\n2 CAP + BEPC                    352\n3 BAC et BAC+2                  286\n4 Diplôme supérieur             829\n\n\nOur vote variable at the second round is also coded with values from 1 to 4. We might want to recode it to have the names of the candidates instead of numbers, and to have a single category for the people who did not cast a valid vote.\n\nfes2022 |&gt; \n  count(vote_t2)\n\n# A tibble: 5 × 2\n  vote_t2                                                     n\n  &lt;dbl+lbl&gt;                                               &lt;int&gt;\n1     1 [Marine Le Pen, Rassemblement national (RN)]        270\n2     2 [Emmanuel Macron, La République en marche (LREM)]   808\n3     3 [Vous avez voté blanc]                              164\n4     4 [Vous avez voté nul]                                 39\n5 NA(a)                                                     294\n\n# Recode vote_t2\nfes2022 &lt;- fes2022 |&gt;\n  mutate(\n    # Create a new variable called candidate_t2\n    candidate_t2 = case_when(\n      # When vote_t2 is 1, assign the value \"Le Pen\"\n      vote_t2 == 1 ~ \"Le Pen\",\n      # When vote_t2 is 2, assign the value \"Macron\"\n      vote_t2 == 2 ~ \"Macron\",\n      # When vote_t2 is 3 or 4, assign the value \"No valid vote\"\n      vote_t2 %in% c(3, 4) ~ \"No valid vote\"\n    )\n  )\n\nfes2022 |&gt; \n  count(vote_t2)\n\n# A tibble: 5 × 2\n  vote_t2                                                     n\n  &lt;dbl+lbl&gt;                                               &lt;int&gt;\n1     1 [Marine Le Pen, Rassemblement national (RN)]        270\n2     2 [Emmanuel Macron, La République en marche (LREM)]   808\n3     3 [Vous avez voté blanc]                              164\n4     4 [Vous avez voté nul]                                 39\n5 NA(a)                                                     294",
    "crumbs": [
      "Testing relationships",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Testing relationships</span>"
    ]
  },
  {
    "objectID": "session04/04_relationships.html#dealing-with-nas",
    "href": "session04/04_relationships.html#dealing-with-nas",
    "title": "\n6  Testing relationships\n",
    "section": "\n6.4 Dealing with Nas",
    "text": "6.4 Dealing with Nas\nIn the last code chunk, it became evident that our “vote” variable contains a considerable number of missing values Before we go further, I want to take a moment to discuss how to deal with missing values. Initially, it’s advisable to obtain an overview of the extent of missing values within our dataset.\n\nsum(is.na(fes2022)) # Count the total number of missing values in the dataset\n\n[1] 97557\n\n\nWe see that we actually have a lot of missing values. This is because some of the variables are only asked to a subset of the respondents. There are several ways to deal with it depending on what you want to do :\n\nRemoving Nas\nConverting values to Nas\nReplacing Nas\n\nFirst, in some instances, we might want to consider to remove all of the observations that have Nas. You can do that by using tidyr::drop_na() on the whole dataset. But be careful with this ! You might lose a lot of information. Here, we actually end up with 0 observations because all of our observations have missing values in at least one variable.\n\n# Drop all of the observations that have missing values\nfes_without_nas &lt;- fes2022 |&gt; \n  drop_na()\n\n# Drop all of the observations that have missing values in the variable symp_macron\n\nfes_without_nas &lt;- fes2022 |&gt; \n  drop_na(symp_macron)\n\nThen, we might want to convert some values to Nas. We can do that by using the dplyr::na_if() function. Here, for instance, I have a variable symp_macron containing information on sympathy towards Emmanuel Macron. The value 96 corresponds to “I don’t know him”. The problem with keeping this value is that it is not a missing value and it will be included in the analysis. For instance, if I compute a mean on this variable, the value 96 will be included in the computation.\n\nfes2022 |&gt; count(symp_macron)\n\n# A tibble: 13 × 2\n   symp_macron                                            n\n   &lt;dbl+lbl&gt;                                          &lt;int&gt;\n 1     0 [Je n'aime pas du tout cette personnalité 0]   308\n 2     1 [1]                                             89\n 3     2 [2]                                             98\n 4     3 [3]                                            109\n 5     4 [4]                                            105\n 6     5 [5]                                            202\n 7     6 [6]                                            135\n 8     7 [7]                                            170\n 9     8 [8]                                            155\n10     9 [9]                                             78\n11    10 [J'aime beaucoup cette personnalité 10]        101\n12    96 [Je ne connais pas cette personnalité]           6\n13 NA(a)                                                 19\n\nmean(fes2022$symp_macron, na.rm = TRUE)\n\n[1] 4.865039\n\n\nTo avoid this, we can convert the value 96 to NA with na_if(). As we can see, the value 96 is now considered as a missing value and is not included in the computation of the mean that is now 4.51.\n\nfes_recoded &lt;- fes2022 |&gt; \n  mutate(symp_macron = na_if(symp_macron, 96))\n\nfes_recoded |&gt; count(symp_macron)\n\n# A tibble: 12 × 2\n   symp_macron                                         n\n   &lt;dbl+lbl&gt;                                       &lt;int&gt;\n 1  0 [Je n'aime pas du tout cette personnalité 0]   308\n 2  1 [1]                                             89\n 3  2 [2]                                             98\n 4  3 [3]                                            109\n 5  4 [4]                                            105\n 6  5 [5]                                            202\n 7  6 [6]                                            135\n 8  7 [7]                                            170\n 9  8 [8]                                            155\n10  9 [9]                                             78\n11 10 [J'aime beaucoup cette personnalité 10]        101\n12 NA                                                 25\n\nmean(fes_recoded$symp_macron, na.rm = TRUE)\n\n[1] 4.512258\n\n\nYou can also automate this with the mutate_at() function. Here, I convert all of the values 96 in the variables starting with “symp” to NAs.\n\n# Automation on all of the candidates\n\nfes2022 &lt;- fes2022 |&gt; \n  mutate_at(vars(starts_with(\"symp\")), ~na_if(., 96))\n\nFinally, we might want to replace Nas with other values. For instance the vote for the secound round variable has missing values as some people did not vote or refused to answer. I might want to keep those values and replace them by another value. Here I decide to code them as well as “No valid vote” which will contains all of the people that did not cast a valid vote (Macron or Le Pen). We can do that by using the tidyr::replace_na() function.\n\nfes2022 |&gt; \n  count(candidate_t2)\n\n# A tibble: 4 × 2\n  candidate_t2      n\n  &lt;chr&gt;         &lt;int&gt;\n1 Le Pen          270\n2 Macron          808\n3 No valid vote   203\n4 &lt;NA&gt;            294\n\nfes2022 &lt;- fes2022 |&gt; \n  mutate(candidate_t2 = replace_na(candidate_t2, \"No valid vote\"))\n\nfes2022 |&gt; \n  count(candidate_t2)\n\n# A tibble: 3 × 2\n  candidate_t2      n\n  &lt;chr&gt;         &lt;int&gt;\n1 Le Pen          270\n2 Macron          808\n3 No valid vote   497\n\n\nIf you want to delve deeper into the topic of missing values, I recommend you to read this. Also, note that there are other ways to deal with missing values. For instance, you can use imputation techniques to replace missing values by plausible values.",
    "crumbs": [
      "Testing relationships",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Testing relationships</span>"
    ]
  },
  {
    "objectID": "session04/04_relationships.html#relationships-between-two-categorical-variables-χ²-test",
    "href": "session04/04_relationships.html#relationships-between-two-categorical-variables-χ²-test",
    "title": "\n6  Testing relationships\n",
    "section": "\n6.5 Relationships between two categorical variables : χ² test",
    "text": "6.5 Relationships between two categorical variables : χ² test\nLet’s look a the relatiohship between two variables : education and voting choice at the second round of the 2022 presidential election. We want to know if there is a relationship between these two variables. We can then formulate the following hypotheses :\nH0 (null hypothesis) : There is NO relationship between education levels and voting choice\nH1 : There is a relationship between education levels and voting choice\nTo look at the plausible relationship between these two variables, we can create a contingency table (or crosstab). Here I use thejanitor::tabyl() function. But you can also use the table() function from base R. These table show the distribution of voting choice for each level of education.\n\n# Create a contingency table\nfes2022 |&gt; \n  tabyl(candidate_t2, education)\n\n  candidate_t2 Sans diplôme et non déclaré CAP + BEPC BAC et BAC+2\n        Le Pen                          29         89           50\n        Macron                          39        141          133\n No valid vote                          40        122          103\n Diplôme supérieur\n               102\n               495\n               232\n\n# Format the table to add totals and percentages\n\ncontingency_table &lt;- fes2022 |&gt; \n  tabyl(candidate_t2, education) |&gt; # Create a contingency table\n  adorn_totals(\"row\") |&gt;  # Add totals as last row \n  adorn_totals(\"col\") |&gt;  # Add totals as last column\n  adorn_percentages() |&gt; # Convert to percentages\n  adorn_pct_formatting(digits = 1) |&gt;  \n  adorn_ns()  \n\ncontingency_table\n\n  candidate_t2 Sans diplôme et non déclaré  CAP + BEPC BAC et BAC+2\n        Le Pen                 10.7%  (29) 33.0%  (89)  18.5%  (50)\n        Macron                  4.8%  (39) 17.5% (141)  16.5% (133)\n No valid vote                  8.0%  (40) 24.5% (122)  20.7% (103)\n         Total                  6.9% (108) 22.3% (352)  18.2% (286)\n Diplôme supérieur          Total\n       37.8% (102) 100.0%   (270)\n       61.3% (495) 100.0%   (808)\n       46.7% (232) 100.0%   (497)\n       52.6% (829) 100.0% (1,575)\n\n# Alternative way with base R \n\ntable(fes2022$candidate_t2, fes2022$education) # Create a contingency table\n\n               \n                Sans diplôme et non déclaré CAP + BEPC BAC et BAC+2\n  Le Pen                                 29         89           50\n  Macron                                 39        141          133\n  No valid vote                          40        122          103\n               \n                Diplôme supérieur\n  Le Pen                      102\n  Macron                      495\n  No valid vote               232\n\nprop.table(table(fes2022$candidate_t2, fes2022$education), 1)\n\n               \n                Sans diplôme et non déclaré CAP + BEPC BAC et BAC+2\n  Le Pen                         0.10740741 0.32962963   0.18518519\n  Macron                         0.04826733 0.17450495   0.16460396\n  No valid vote                  0.08048290 0.24547284   0.20724346\n               \n                Diplôme supérieur\n  Le Pen               0.37777778\n  Macron               0.61262376\n  No valid vote        0.46680080\n\n\nFrom this table, we can already see that the vote choice vary across education level. The total shows us what would be the distribution of voting choice if there was no relationship between education and voting choice. But we can see that voters with higher education have voted more for Macron than for Le Pen and that the opposite is true for voters with lower education. But is this difference statistically significant or does it reflect sampling error ?\nTo test this, we need to compute a test statistic. As we ar dealing with two categorical variables, we will use a χ² test. This test is used to test the relationship between two categorical variables by comparing the observed distribution of our values to their expected distribution if there was no relationship between the two variables. To do this in R, we can use the chisq.test() function. By default, the significance level is set at 0.05.\n\ntest_educ &lt;- chisq.test(fes2022$candidate_t2, fes2022$education)\n\ntest_educ\n\n\n    Pearson's Chi-squared test\n\ndata:  fes2022$candidate_t2 and fes2022$education\nX-squared = 64.386, df = 6, p-value = 5.757e-12\n\n\nThis gives us several informations :\n\nThe X-squared value, which is our test statistic. It is computed by comparing the observed values to the expected values. You can access them with broom::augment(). Expected values are the values that we would expect if there was no relationship between the two variables. They are computed by multiplying the row total by the column total and dividing by the grand total. Ex, for Le Pen and less educated : 108*270/1575 = 18.54. If there was no relationship between education and voting choice, we would expect 18.54 people to vote for Le Pen and we have 29.\n\n\naugmented_test &lt;- augment(test_educ)\n\naugmented_test\n\n# A tibble: 12 × 9\n   fes2022.candidate_t2 fes2022.education   .observed  .prop .row.prop .col.prop\n   &lt;fct&gt;                &lt;fct&gt;                   &lt;int&gt;  &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1 Le Pen               Sans diplôme et no…        29 0.0184    0.107      0.269\n 2 Macron               Sans diplôme et no…        39 0.0248    0.0483     0.361\n 3 No valid vote        Sans diplôme et no…        40 0.0254    0.0805     0.370\n 4 Le Pen               CAP + BEPC                 89 0.0565    0.330      0.253\n 5 Macron               CAP + BEPC                141 0.0895    0.175      0.401\n 6 No valid vote        CAP + BEPC                122 0.0775    0.245      0.347\n 7 Le Pen               BAC et BAC+2               50 0.0317    0.185      0.175\n 8 Macron               BAC et BAC+2              133 0.0844    0.165      0.465\n 9 No valid vote        BAC et BAC+2              103 0.0654    0.207      0.360\n10 Le Pen               Diplôme supérieur         102 0.0648    0.378      0.123\n11 Macron               Diplôme supérieur         495 0.314     0.613      0.597\n12 No valid vote        Diplôme supérieur         232 0.147     0.467      0.280\n# ℹ 3 more variables: .expected &lt;dbl&gt;, .resid &lt;dbl&gt;, .std.resid &lt;dbl&gt;\n\n\n\n# Compute chi2 value\n\nchi2_value &lt;- sum((augmented_test$.observed - augmented_test$.expected)^2 / augmented_test$.expected)\nchi2_value\n\n[1] 64.38626\n\n\nOur p-value set at a significant level of 0.05. The p-value is the probability of observing a test statistic as extreme or more extreme than the one we observed if the null hypothesis is true. Based on this critical value and the X-squared value, the chi2 table gives us that p-value. Here, the p-value is 5.757e-12, which is equivalent to 0.000000000005757. This means that if there was no relationship between education and voting choice in the population, we would observe the distribution we have in our sample only 5.757e-12% of the time. So we can reject the null hypothesis and conclude that there is a statistically significant relationship between education and voting choice.\nUsing the infer package, we can also visualize how far is our observed statistic from the distribution of statistics under the null hypothesis.\n\n# calculate the observed statistic\n\nobserved_indep_statistic &lt;- fes2022 |&gt; \n  specify(candidate_t2 ~ education) |&gt;\n  hypothesize(null = \"independence\") |&gt; \n  calculate(stat = \"Chisq\")\n\n# calculate the null distribution\nnull_dist_sim &lt;- fes2022 |&gt;\n  drop_na(candidate_t2) |&gt;\n  specify(candidate_t2 ~ education) |&gt;\n  hypothesize(null = \"independence\") |&gt;\n  generate(reps = 1000, type = \"permute\") |&gt;\n  calculate(stat = \"Chisq\")",
    "crumbs": [
      "Testing relationships",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Testing relationships</span>"
    ]
  },
  {
    "objectID": "session04/04_relationships.html#relationship-between-a-categorical-and-a-continuous-variable-t-test",
    "href": "session04/04_relationships.html#relationship-between-a-categorical-and-a-continuous-variable-t-test",
    "title": "\n6  Testing relationships\n",
    "section": "\n6.6 Relationship between a categorical and a continuous variable : t-test",
    "text": "6.6 Relationship between a categorical and a continuous variable : t-test\nThus far, we have examined the relationship between two categorical variables. However, there are instances when we are interested in assessing how various groups vary in terms of their values on a continuous variable. For this, we can use a t-test, which is a statistical test that allows us to compare the means of two groups. The t-test is used to test the null hypothesis that there is no difference between the means of the two groups. The alternative hypothesis is that there is a difference between the means of the two groups. Our goal is to reject the null hypothesis.\nHere, I want to know whether men and women tend to have different levels of sympathy towards far right candidates.\nH0 : There is no difference between gender in terms of sympathy towards far right candidates.\nH1 : There is a difference between gender in terms of sympathy towards far right candidates.\n\nfes2022 |&gt; \n  count(symp_zemmour)\n\n# A tibble: 12 × 2\n   symp_zemmour                                           n\n   &lt;dbl+lbl&gt;                                          &lt;int&gt;\n 1     0 [Je n'aime pas du tout cette personnalité 0]  1049\n 2     1 [1]                                            128\n 3     2 [2]                                             95\n 4     3 [3]                                             60\n 5     4 [4]                                             39\n 6     5 [5]                                             62\n 7     6 [6]                                             33\n 8     7 [7]                                             28\n 9     8 [8]                                             15\n10     9 [9]                                             11\n11    10 [J'aime beaucoup cette personnalité 10]         26\n12 NA(a)                                                 29\n\nfes2022 |&gt;\n  count(symp_lepen)\n\n# A tibble: 12 × 2\n   symp_lepen                                             n\n   &lt;dbl+lbl&gt;                                          &lt;int&gt;\n 1     0 [Je n'aime pas du tout cette personnalité 0]   826\n 2     1 [1]                                            155\n 3     2 [2]                                            108\n 4     3 [3]                                             74\n 5     4 [4]                                             45\n 6     5 [5]                                            102\n 7     6 [6]                                             51\n 8     7 [7]                                             50\n 9     8 [8]                                             47\n10     9 [9]                                             16\n11    10 [J'aime beaucoup cette personnalité 10]         83\n12 NA(a)                                                 18\n\nfes2022 |&gt;\n  count(gender)\n\n# A tibble: 2 × 2\n  gender        n\n  &lt;dbl+lbl&gt; &lt;int&gt;\n1 1 [Homme]   747\n2 2 [Femme]   828\n\n\n\n# Recode gender\n\nfes2022 &lt;- fes2022 |&gt;\n  mutate(\n    gender = unlabelled(gender)\n  )\n\nfes2022 |&gt; \n  count(gender)\n\n# A tibble: 2 × 2\n  gender     n\n  &lt;fct&gt;  &lt;int&gt;\n1 Homme    747\n2 Femme    828\n\n\n\n# Compute the mean\n\nfes2022 |&gt;\n  group_by(gender) |&gt;\n  summarise(\n    n = n(),\n    mean_symp_zemmour = mean(symp_zemmour, na.rm = TRUE),\n    mean_symp_lepen = mean(symp_lepen, na.rm = TRUE)\n  )\n\n# A tibble: 2 × 4\n  gender     n mean_symp_zemmour mean_symp_lepen\n  &lt;fct&gt;  &lt;int&gt;             &lt;dbl&gt;           &lt;dbl&gt;\n1 Homme    747             1.49             2.14\n2 Femme    828             0.916            2.08\n\n\nWe can test this statistically by using a t.test that will tell us if the difference in means between the two groups is statistically significant. To do so, we use the t.test() function that takes as input the two variables we want to compare with a ~ in between and the data where it comes from. Here, we want to compare the level of trust between voters of Macron and Le Pen. So, we use the trust_index2 variable as the first argument and the candidate_t2 variable as the second argument. We also specify the dataset we want to use with the data argument.\n\ntest_lepen &lt;- t.test(fes2022$symp_lepen ~  fes2022$gender)\n\ntest_lepen\n\n\n    Welch Two Sample t-test\n\ndata:  fes2022$symp_lepen by fes2022$gender\nt = 0.39194, df = 1553.9, p-value = 0.6952\nalternative hypothesis: true difference in means between group Homme and group Femme is not equal to 0\n95 percent confidence interval:\n -0.2421654  0.3631108\nsample estimates:\nmean in group Homme mean in group Femme \n           2.144011            2.083538 \n\n\nThe t-value is our test statistic. It is computed by comparing the difference between the two means to the variability within the groups. The closer the t-value is to 0, the more similar the two groups are. The degrees of freedom are computed by the formula : df = n1 + n2 - 2, where n1 and n2 are the number of observations in each group. The p-value is the probability of observing a test statistic as extreme or more extreme than the one we observed if the null hypothesis is true. Based on this critical value and the t-value, the t-table gives us that p-value. Here, the p-value is 0.6952 This means that if there was no difference between the two groups in the population, we would observe the differences we have in our sample 69.52% of the time. So we cannot reject the null hypothesis and conclude that there is no statistically significant difference between the two groups (Men and women) in terms of sympathy towards Marine Le Pen.\n\ntest_zemmour &lt;- t.test(fes2022$symp_zemmour ~  fes2022$gender)\n\ntest_zemmour\n\n\n    Welch Two Sample t-test\n\ndata:  fes2022$symp_zemmour by fes2022$gender\nt = 4.8889, df = 1405.6, p-value = 1.13e-06\nalternative hypothesis: true difference in means between group Homme and group Femme is not equal to 0\n95 percent confidence interval:\n 0.3409936 0.7980112\nsample estimates:\nmean in group Homme mean in group Femme \n          1.4851351           0.9156328 \n\n\nThe p-value is 1.13e-06. This means that if there were no difference between the two groups in the population (H0), we would observe the differences we have in our sample (or more extreme) only 0.000113% of the time. Therefore, we can reject the null hypothesis and conclude that there is a statistically significant difference between the two groups, as the p-value is significantly less than our critical value of 0.05.\nWhile there are no statistically significant differences between women and men in terms of sympathy towards Marine Le Pen, there is a statistically significant difference between women and men regarding sympathy towards Eric Zemmour. Men tend to be more sympathetic towards Eric Zemmour than women.",
    "crumbs": [
      "Testing relationships",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Testing relationships</span>"
    ]
  }
]