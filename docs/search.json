[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to R",
    "section": "",
    "text": "Course overview\nThis website contains all the material for the lab sessions of the Quantitative Methods class for the Fall 2025 semester in the research master’s program in Political Science at Sciences Po Paris. The class complements Jan Rovny’s lecture on Quantitative Methods I.\nThe course provides you with the fundamentals, resources, and motivation to further your learning independently, prepare for the next semester Luis Sattelmayer’s R sessions, and apply quantitative methods in your future research.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#outline-of-the-course",
    "href": "index.html#outline-of-the-course",
    "title": "Introduction to R",
    "section": "Outline of the course",
    "text": "Outline of the course\n\n\n\nSession\nDescription\nDate\n\n\n\n\nSession 1\nGetting started with R and Rstudio\n\n\n\nSession 2\nManipulating and describing data\n\n\n\nSession 3\nVisualizing data\n\n\n\nSession 4\nTesting relationships\n\n\n\nSession 5\nCorrelation and simple linear regression\n\n\n\nSession 6\nMultivariate analysis",
    "crumbs": [
      "Course content"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setting up R and Rstudio",
    "section": "",
    "text": "Install R\nYou can install R from CRAN (The comprehensive R Archive Network). On CRAN, you will find links to download the version of R you need for your operating system (Windows, Mac or Linux). Once the download is complete, you need to execute the installer.",
    "crumbs": [
      "Setting up R and Rstudio"
    ]
  },
  {
    "objectID": "setup.html#install-rstudio",
    "href": "setup.html#install-rstudio",
    "title": "Setting up R and Rstudio",
    "section": "Install Rstudio",
    "text": "Install Rstudio\nOnce R is set up, you can install Rstudio. For this, go on this webpage, download Rstudio and follow the instructions.",
    "crumbs": [
      "Setting up R and Rstudio"
    ]
  },
  {
    "objectID": "setup.html#set-preferences-and-check-if-everything-works",
    "href": "setup.html#set-preferences-and-check-if-everything-works",
    "title": "Setting up R and Rstudio",
    "section": "Set preferences and check if everything works",
    "text": "Set preferences and check if everything works\nOnce the installation of both R and Rstudio is complete, you should open Rstudio. If everything worked, something very similar to the screenshot below should appear. If it doesn’t open, restart your latptop and try again.\n\nRStudio has some default settings that are worth changing to adopt best practices. Please do the following:\n\nTools /Global options/RGeneral : Save workspace to never and uncheck the box Restore .Rdata into workspace at startup.\n\nWhile R provides a series of basic commands for data manipulation, many of the functionalities we will use come from packages that need to be installed and loaded via RStudio. The most well-known package we will use is called tidyverse. To check if your installation is successful and you are ready to start the course, copy-paste the following code into the console pane and press enter. It might take a few minutes, and at the end, you should see the same message as the one below.\n\nif (!require(tidyverse)) {install.packages(\"tidyverse\")}\n\nLoading required package: tidyverse\n\n\n── Attaching core tidyverse packages ─────────────────── tidyverse 2.0.0.9000 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors",
    "crumbs": [
      "Setting up R and Rstudio"
    ]
  },
  {
    "objectID": "setup.html#installation-issues",
    "href": "setup.html#installation-issues",
    "title": "Setting up R and Rstudio",
    "section": "Installation issues",
    "text": "Installation issues\nIf you do not see the message above, welcome in the world of troubleshooting! Depending on your operating system (MacOS, Windows, Linux) and the configuration of your computer, the installation process may not go as smoothly as expected. Here are some common issues and how to solve them:\nMac\nIf a message appears saying that the package cannot be found, try the following :\n\nif (!require(tidyverse)) {devtools::install_github(\"hadley/tidyverse\")}\n\nWindows\nIf a message appears saying that the package cannot be found, try to install Rtools by copying and pasting the following code into the console pane.\n\nif (Sys.info()[\"sysname\"] == \"Windows\") {\n  install.packages(\"Rtools\")\n}\n\nIf a message appears that Rtools is not available, download it from here. Then restart your computer and try to install the tidyverse package again.\nIf all of this does not work or you have different types of issues, please contact me.",
    "crumbs": [
      "Setting up R and Rstudio"
    ]
  },
  {
    "objectID": "session01/basics.html",
    "href": "session01/basics.html",
    "title": "\n2  R basics\n",
    "section": "",
    "text": "2.1 R as calculator\nFirst of all, R is a fancy calculator that can be used to perform fundamental arithmeric operations.\n3+7+10 # Addition\n\n[1] 20\n\n4-5 # Substraction\n\n[1] -1\n\n3*9*10 # Multiplication\n\n[1] 270\n\n2/6 # Division\n\n[1] 0.3333333\n\n2^2 # Exponentiation\n\n[1] 4\n\n(2+2)-(4*4)/2^2 # Mix of operations\n\n[1] 0",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#objects",
    "href": "session01/basics.html#objects",
    "title": "\n2  R basics\n",
    "section": "\n2.2 Objects",
    "text": "2.2 Objects\nWhen you run code in R, the results are shown in the console. However, you cannot directly reuse these results in further operations, which is what we want to do. To address this, we use objects. Objects in R act as containers that store values, allowing you to keep information for later use. To create an object in R, you use the assignment operator &lt;- .\n\nmy_object &lt;- 2\nmy_object\n\n[1] 2\n\n\nLet’s consider an example from the most recent French general election. The results led to a highly fragmented parliament, with 11 different parliamentary groups and no single party or coalition able to form an absolute majority on its own. This situation raises the question of which coalitions could be formed to achieve a majority and pass legislation. The code below uses objects to store the number of seats obtained by each parliamentary group.\n\n# Left-wing groups\ncommunists_seats &lt;- 17\nlfi_seats &lt;- 72\ngreens_seats &lt;- 38\nsocialists_seats &lt;- 66\n\n# Macron's party and allies\nrenaissance_seats &lt;- 99  # This is Macron's party\nmodem_seats &lt;- 36        # MODEM, a centrist party\nhorizon_seats &lt;- 31      # Horizon, party of the former PM Édouard Philippe\n\n# Right-wing groups\nconservatives_seats &lt;- 47  # \"Les Républicains\"\n\n# Far-right groups\nrn_seats &lt;- 126            # National Rally (RN)\nciotti_seats &lt;- 16         # Former conservatives who allied with Le Pen's party\n\n# Others\nliot_seats &lt;- 22           # A mix of some independent centrists and regionalists\nnone_seats &lt;- 7            # Non-affiliated MPs\n\nAfter executing these lines, you should be able to see the objects created and their values in the environment pane located in the upper-right section of RStudio. Once these objects created, it is possible to perform operations on them. For instance, it is possible to compute the total number of seats of actual existing coalitions by summing the number of seats of the different parties that compose them and saving them in new objects. Below, I create a new object left_seats that stores the total number of seats obtained by the left-wing parties by summing the different objects that store the number of seats obtained by the left-wing parties.\n\nleft_seats &lt;- communists_seats + lfi_seats + greens_seats + socialists_seats\nleft_seats\n\n[1] 193\n\n\n\n\n\n\n\n\nYour turn !\n\n\n\nCreate two new objects macron_seats and far_right_seats that store the total number of seats obtained by Macron’s allies and far-right parties respectively.\n\nSolution. Click to expand!\nSolution:\n\nmacron_seats &lt;- renaissance_seats + modem_seats + horizon_seats\nfar_right_seats &lt;- rn_seats + ciotti_seats",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#vectors",
    "href": "session01/basics.html#vectors",
    "title": "\n2  R basics\n",
    "section": "\n2.3 Vectors",
    "text": "2.3 Vectors\nThe objects we used so far contained only one numeric value. However, what we mostly manipulate in R are vectors, which are sequences of different values on which we can perform operations. Vectors can be of different types (eg : numeric, character, logical, date) but they have to be of the same type. For instance, a numeric vector is a sequence of different numbers and a character vector is a sequence of different strings. Vectors are also unidimensionals which mean they contains only one sequence of values and not several such as matrices do.\nWe can generate vectors with c() which stands for “concatenate”. For instance, here, I create a vector containing the values of the seats obtained by different coalitions in the election. As a result, the vector coalition_seats contains the number of seats obtained by the left, Macron’s party and allies, the far-right and the conservatives.\n\ncoalition_seats &lt;- c(left_seats, macron_seats, far_right_seats, conservatives_seats)\ncoalition_seats\n\n[1] 193 166 142  47\n\n\nWe use vectors to store different values because it is possible to perform the same operation on all the values of a vector at once. Let’s say we want to know the number of seats that an existing coalition would need to have an absolute majority in the parliament. We can do this by creating a new object, majority, that stores the number of seats needed for an absolute majority, and then subtracting the number of seats obtained by the different coalitions from this value. The result will be a vector showing the number of seats each coalition needs to reach an absolute majority, which we could also store in a new object if desired.\n\nmajority &lt;- 577/2 + 0.5 # Half of the number of seats (577) + 0.5 to round up (there is no half MP)\n\nmajority - coalition_seats\n\n[1]  96 123 147 242\n\n\n\n2.3.1 Characters vectors\nSo far, we have only used numerical vectors, which consist of numbers. However, we can also create character vectors, which are made up of strings enclosed in quotes (either single ' or double \"). For example, we can create a vector containing the names of different parliamentary leaders.\n\nleft_leaders &lt;- c(\"Chassaigne\", \"Chatelain\", \"Panot\", \"Vallaud\") # Create a vector of left-wing leaders\nfar_right_leaders &lt;- c(\"Ciotti\", \"Le Pen\") # Create a vector of far-right leaders\n\nAs for other vectors, you can combine them in a single vector which will return a vector with all the leaders’ names.\n\nleaders &lt;- c(left_leaders, far_right_leaders)\nleaders\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"    \"Ciotti\"    \n[6] \"Le Pen\"    \n\n\n\n2.3.2 Logical vectors\nAnother type of vector in R is the logical vector, which consists of Boolean values: TRUE or FALSE. Logical vectors are useful for evaluating conditions. They can be used to check for errors in data or to filter variables based on specific criteria.\n\nc(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE)\n\n[1]  TRUE  TRUE  TRUE FALSE FALSE FALSE\n\n\nFor instance, we could check whether there are no mistakes and confirm that Le Pen is not a leader of the left coalition. This means verifying that no value in the left_leaders vector is equal to “Le Pen”.\n\nleft_leaders == \"Le Pen\"\n\n[1] FALSE FALSE FALSE FALSE\n\nfar_right_leaders == \"Le Pen\"\n\n[1] FALSE  TRUE\n\n\nThe evaluation of conditions can also be used to compare numeric values. For instance, we can check whether the left coalition has more seats than the far-right coalition.\n\nleft_seats &gt; far_right_seats\n\n[1] TRUE\n\n\n\n2.3.3 Indexing\nWhen we manipulate vectors, we often want to access specific elements of them, which we call indexing, which is performed by using square brackets []. You can index either by position or by name.\nWhen I write leaders[3], I want the value of the third element of the leaders vector, this is indexing by position. But when I write leaders[leaders == \"Le Pen\"], I index by name because I want the elements that have Le Pen as value.\n\nleaders\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"    \"Ciotti\"    \n[6] \"Le Pen\"    \n\nleaders[4] # Get the third element of the vector\n\n[1] \"Vallaud\"\n\nleaders[-3] # Get everything but the third element of the vector\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Vallaud\"    \"Ciotti\"     \"Le Pen\"    \n\nleaders[c(1,4)] # Get the first and the fifth elements of the vector\n\n[1] \"Chassaigne\" \"Vallaud\"   \n\nleaders[1:3] # Get elements from the first to the third\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"     \n\nleaders[leaders == \"Le Pen\"] # Which has Le Pen as value\n\n[1] \"Le Pen\"\n\nleaders[leaders != \"Le Pen\"] # Which has not Le Pen as value\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"    \"Ciotti\"    \n\nleaders[leaders %in% c(\"Le Pen\", \"Ciotti\")]# Which has Le Pen or Ciotti\n\n[1] \"Ciotti\" \"Le Pen\"\n\nleaders[!leaders %in% c(\"Le Pen\", \"Ciotti\")]# Which has neither Le Pen nor Ciotti\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"   \n\n\n\n\n\n\n\n\nYour turn !\n\n\n\nCreate a vector that contains the names of the leaders of the Macron’s party : Attal, Fesneau, Marcangeli. Then, add this vector to the leaders vector and store the result in a new object all_leaders. Find two different ways to then index only the names of these leaders from the all_leaders object.\n\nSolution. Click to expand!\nSolution:\n\nmacron_leaders &lt;- c(\"Attal\", \"Fesneau\", \"Marcangeli\")\nall_leaders &lt;- c(leaders, macron_leaders)\n\nall_leaders[c(5,6,7)]\n\n[1] \"Ciotti\" \"Le Pen\" \"Attal\" \n\nall_leaders[all_leaders %in% c(\"Attal\", \"Fesneau\", \"Marcangeli\")]\n\n[1] \"Attal\"      \"Fesneau\"    \"Marcangeli\"",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#functions",
    "href": "session01/basics.html#functions",
    "title": "\n2  R basics\n",
    "section": "\n2.4 Functions",
    "text": "2.4 Functions\nTo manipulate vectors and conduct operations on them, we use functions. A function is a reusable block of code that performs a specific task, it takes several input values called arguments and produce an output.\nLet’s say you want to know how many seats parliamentary groups have on average in the French parliament. You could calculate the sum of the seats and dividing them by their number.\n\n(communists_seats + greens_seats + socialists_seats + lfi_seats + renaissance_seats + modem_seats + horizon_seats + conservatives_seats + ciotti_seats + rn_seats + none_seats + liot_seats)/12\n\n[1] 48.08333\n\n\nBut you could also just the mean() function that exists in R and that takes a vector of numbers as argument.\n\nparl_seats &lt;- c(communists_seats, greens_seats, socialists_seats, lfi_seats, renaissance_seats, modem_seats, horizon_seats, conservatives_seats, ciotti_seats, rn_seats, none_seats, liot_seats)\n\nmean(parl_seats) # Compute the mean of the vector parl_seats\n\n[1] 48.08333\n\n\nIt is also easy to use functions to compute the maximum, minimum, and sum of a vector of numbers.\n\nmax(parl_seats) # Compute the maximum of the vector parl_seats\n\n[1] 126\n\nmin(parl_seats) # Compute the minimum of the vector parl_seats\n\n[1] 7\n\nsum(parl_seats) # Compute the sum of the vector parl_seats\n\n[1] 577\n\n\nIn R, functions often expect inputs of specific types. If you pass a character vector containing numeric numbers as strings to a function that expects a numeric vector, it may not behave as expected. As shown below, the function returns a NA which means Not available/applicable. When R encounters something it doesn’t understand, it returns an error message with indications about the problem.\n\nparl_seats_chr &lt;- c(\"17\", \"38\", \"66\", \"72\", \"99\", \"36\", \"31\", \"47\", \"16\", \"126\", \"7\", \"22\")\nparl_seats_chr\n\n [1] \"17\"  \"38\"  \"66\"  \"72\"  \"99\"  \"36\"  \"31\"  \"47\"  \"16\"  \"126\" \"7\"   \"22\" \n\nmean(parl_seats_chr) # This returns NA\n\nWarning in mean.default(parl_seats_chr): argument is not numeric or logical:\nreturning NA\n\n\n[1] NA\n\n\nSimilarly, computing the sum of the parl_seats_chr vector will work as expected but trying to calculate the sum of our leaders character vector composed of leaders’s names will not give a meaningful result.\n\nsum(parl_seats_chr)\n\nError in sum(parl_seats_chr): invalid 'type' (character) of argument\n\nsum(leaders) # This is an error\n\nError in sum(leaders): invalid 'type' (character) of argument\n\n\nIf you are not sure about the type of your vectors, you can check with the class() function that will give you the answer.\n\nclass(parl_seats)\n\n[1] \"numeric\"\n\nclass(parl_seats_chr)\n\n[1] \"character\"\n\n\nSometimes, a vector has not the good type for the operation we want to perform. To check the type of a vector, you can use the family of is. functions such as is.numeric() and is.character() that return a boolean operator. In case the vector is not the right type for our purpose, wan can try to coerce them with the family of as. functions such as as.numeric() and as.character().\n\nis.numeric(parl_seats_chr) # Check if numeric\n\n[1] FALSE\n\nparl_seats_num &lt;- as.numeric(parl_seats_chr) # Coerce to numeric\nis.numeric(parl_seats_num) # Check again if numeric\n\n[1] TRUE\n\nmean(parl_seats_num) # Compute the mean\n\n[1] 48.08333\n\n\nFunctions that you will find in R have been created by someone. You can also create your own functions in R. You usually start doing it when you are more advanced so do not worry it you find it hard, it is just for you to know that it is possible. Here I just create a simplified other function to calculate a mean in R.\n\n# Create a function to compute the mean of a vector\n\ncompute_mean &lt;- function(x) {\n  # Compute the sum of the values in the vector and divide by the number of values (length)\n  mean &lt;- sum(x)/length(x)\n  \n  # Return the result\n  return(mean)\n}\n\ncompute_mean(parl_seats)\n\n[1] 48.08333",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#missing-values",
    "href": "session01/basics.html#missing-values",
    "title": "\n2  R basics\n",
    "section": "\n2.5 Missing values",
    "text": "2.5 Missing values\nIn R, a missing value is represented by the symbol NA, which stands for “Not Available.” Missing values can arise for a variety of reasons, such as data not being observed or recorded, errors in data collection, or intentional omissions. Understanding and handling missing values is crucial because they can influence the results of your analysis or even cause some functions to return errors. For instance, imagine I haven’t found any information about the number of seats one parliamentary group get, but I want to retain this information in my vector. So, I add an NA to it.\n\nparl_seats &lt;- c(parl_seats, NA)\nparl_seats\n\n [1]  17  38  66  72  99  36  31  47  16 126   7  22  NA\n\n\nWhen analyzing data, it’s not uncommon to encounter NA values, and it’s important to be aware of them. To check if a vector contains NA values, you can use the is.na() function. This function returns a logical vector indicating whether each value is NA (TRUE) or not (FALSE).\n\nis.na(parl_seats) # Check which values of a vector are NAs\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13]  TRUE\n\n\nThis is important because certain functions will not operate properly if there are NA values in your data. For instance, the mean() function will return NA if the data contains any NA values\n\nmean(parl_seats)\n\n[1] NA\n\n\nTo deal with NA, the mean() function has a na.rm\n\nmean(parl_seats, na.rm = TRUE) # Remove NA before computing the mean\n\n[1] 48.08333",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#packages-and-libraries",
    "href": "session01/basics.html#packages-and-libraries",
    "title": "\n2  R basics\n",
    "section": "\n2.6 Packages and libraries",
    "text": "2.6 Packages and libraries\nThe functions we’ve discussed so far, such as sum() and mean(), come from base R. These are pre-loaded functions available immediately upon starting R. However, many functions you’ll encounter aren’t part of base R but instead belong to specific packages that individuals or groups have developed. You can think of packages as collections of functions crafted to simplify certain tasks or to introduce new capabilities to R. For example, there’s the tidyverse package, which I asked you to install before the class\nTo install a package in R, you can use the install.packages() function, passing the name of the package in quotation marks (either single or double). I recommend doing this installation in the console since you don’t need to save this step; it’s a one-time action. However, every time you start your script or Quarto document, you’ll need to load the package. To do this, use the library() function, providing the package name as an argument, but without the quotation marks.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ─────────────────── tidyverse 2.0.0.9000 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThe tidyverse isn’t just a single package but rather a meta-package, meaning it bundles together several other packages, each with its own set of functions. For example, one of these bundled packages is stringr, which offers tools for manipulating character vectors. Since stringr is part of the tidyverse, if you’ve already loaded the tidyverse, there’s no need to load stringr separately. With it, you can perform tasks like converting strings in a vector to uppercase or lowercase.\n\nleaders\n\n[1] \"Chassaigne\" \"Chatelain\"  \"Panot\"      \"Vallaud\"    \"Ciotti\"    \n[6] \"Le Pen\"    \n\nstr_to_lower(leaders) # Change strings to lower class\n\n[1] \"chassaigne\" \"chatelain\"  \"panot\"      \"vallaud\"    \"ciotti\"    \n[6] \"le pen\"    \n\nstr_to_upper(leaders) # Change strings to upper class\n\n[1] \"CHASSAIGNE\" \"CHATELAIN\"  \"PANOT\"      \"VALLAUD\"    \"CIOTTI\"    \n[6] \"LE PEN\"    \n\nstr_detect(leaders, \"C\") # Detect if strings that contains a \"C\"\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE FALSE\n\n\nWe can also combine characters vectors together with str_c().\n\nparties &lt;- c(\"Communists\", \"Greens\", \"LFI\", \"Socialists\", \"Ciotti's party\", \"National Rally\")\n\nstr_c(leaders, \" is the parliamentary leader of \", parties)\n\n[1] \"Chassaigne is the parliamentary leader of Communists\"\n[2] \"Chatelain is the parliamentary leader of Greens\"     \n[3] \"Panot is the parliamentary leader of LFI\"            \n[4] \"Vallaud is the parliamentary leader of Socialists\"   \n[5] \"Ciotti is the parliamentary leader of Ciotti's party\"\n[6] \"Le Pen is the parliamentary leader of National Rally\"",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#dataframes-and-tibbles",
    "href": "session01/basics.html#dataframes-and-tibbles",
    "title": "\n2  R basics\n",
    "section": "\n2.7 Dataframes and tibbles",
    "text": "2.7 Dataframes and tibbles\nWhen processing data, we primarily interact with vectors through the manipulation of dataframes in R. Dataframes are two-dimensional structures that contain rows and columns. Each column is a vector, and each row is an observation. Dataframes are the primary data structure used for data manipulation, computation, and visualization in R. In this class, we’ll work with a specific type of dataframe that comes from the tidyverse package called a tibble. Tibbles are a modern and enhanced version of dataframes that make them easier to print and manipulate.\nHowever, we primarily interact with vectors through the manipulation of dataframes in R. Dataframes are composed of combinations of vectors, which can vary in types. Dataframes are two-dimensionals, with columns (or variables) and rows (or observations). This is what we use for manipulating data, computing statistics and visualization. In this class, we will work with a specific form of dataframe coming from the tidyverse packages that is called a tibble. Tibbles make dataframes easier to print and manipulate.\nTo understand what dataframes look like, let us continue with the results of the spanish elections. I manually create a tibble with the tibble() function with different variables about different parties, their seats, their vote share and their candidate.\n\nleft_coalition &lt;- tibble(\n  party = c(\"Communists\", \"Greens\", \"LFI\", \"Socialists\"),\n  leader = c(\"Chassaigne\", \"Chatelain\", \"Panot\", \"Vallaud\"),\n  seats_2024 = c(17, 38, 72, 66),\n  seats_2022 = c(22, 21, 75, 31)\n)\n\nYou see now that we have a new object in our Environment Pane with 3 observations and 5 variables. If we want to access only one variable (one vector) of that dataframe, we use the $ sign. This will return a vector of the values of this variable. You can also get the same result by indicating the position of the column inside [[]].\n\nleft_coalition$party # Select the party variable\n\n[1] \"Communists\" \"Greens\"     \"LFI\"        \"Socialists\"\n\nleft_coalition[[1]] # Double brackets here because not atomic vectors anymore but nested structure\n\n[1] \"Communists\" \"Greens\"     \"LFI\"        \"Socialists\"\n\n\nWe can also use indexing to get the value of specific cell.\n\nleft_coalition$leader[4] # Get the row 4 of the candidate variable\n\n[1] \"Vallaud\"\n\nleft_coalition[4, 1] # get the value of the row 4, column 1\n\n# A tibble: 1 × 1\n  party     \n  &lt;chr&gt;     \n1 Socialists\n\n\nDifferent functions are availble to get an idea of the informations and shape of the dataframe, which are useful when we load an unknown dataset and we want to understand its structure, what are the observations and variables.\n\nhead(left_coalition, 1) # Return x first rows of an object\n\n# A tibble: 1 × 4\n  party      leader     seats_2024 seats_2022\n  &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;\n1 Communists Chassaigne         17         22\n\ntail(left_coalition, 2) # Return x last rows of an object\n\n# A tibble: 2 × 4\n  party      leader  seats_2024 seats_2022\n  &lt;chr&gt;      &lt;chr&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n1 LFI        Panot           72         75\n2 Socialists Vallaud         66         31\n\ndplyr::glimpse(left_coalition) # Get a glimpse of your data\n\nRows: 4\nColumns: 4\n$ party      &lt;chr&gt; \"Communists\", \"Greens\", \"LFI\", \"Socialists\"\n$ leader     &lt;chr&gt; \"Chassaigne\", \"Chatelain\", \"Panot\", \"Vallaud\"\n$ seats_2024 &lt;dbl&gt; 17, 38, 72, 66\n$ seats_2022 &lt;dbl&gt; 22, 21, 75, 31\n\ncolnames(left_coalition) # Retrieve column names of the dataframe\n\n[1] \"party\"      \"leader\"     \"seats_2024\" \"seats_2022\"\n\nnrow(left_coalition) # Return the number of rows present in the dataframe\n\n[1] 4\n\nncol(left_coalition) # Return the number of columns present in the dataframe\n\n[1] 4\n\nsummary(left_coalition) # Return a summary of the variables\n\n    party              leader            seats_2024      seats_2022   \n Length:4           Length:4           Min.   :17.00   Min.   :21.00  \n Class :character   Class :character   1st Qu.:32.75   1st Qu.:21.75  \n Mode  :character   Mode  :character   Median :52.00   Median :26.50  \n                                       Mean   :48.25   Mean   :37.25  \n                                       3rd Qu.:67.50   3rd Qu.:42.00  \n                                       Max.   :72.00   Max.   :75.00  \n\n\nYou can also create new variables based on the existing ones. Here I create a new variable called seats_share by calculating the share of seats each party has in the parliament (dividing their seats by the total number of seats and multiplying by 100).\n\nleft_coalition$seats_share &lt;- left_coalition$seats_2024/577*100\n\n\n\n\n\n\n\nYour turn !\n\n\n\nCreate a new variable called seats_change that calculates the difference of seats between 2024 and 2022 for each party.\n\nSolution. Click to expand!\nSolution:\n\nleft_coalition$seats_change &lt;- left_coalition$seats_2024 - left_coalition$seats_2022",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#going-further",
    "href": "session01/basics.html#going-further",
    "title": "\n2  R basics\n",
    "section": "\n2.9 Going further",
    "text": "2.9 Going further\n\n2.9.1 Naming things\nNote that I have written the names of objects with underscores. There are different conventions to write object names in R that you can discover here. I personnaly use snake case which use lowercase letters and underscores to separate words.\n\n2.9.2 Packages\nNote above that I have used, the :: operator. It lets you reference a specific function from a package without loading the whole package. This is handy when two packages have functions with the same name, ensuring clarity in your code. It’s also useful for one-off function uses, avoiding the need to load an entire package. This approach can make code clearer and sometimes faster by reducing loaded dependencies",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#getting-data",
    "href": "session01/basics.html#getting-data",
    "title": "R basics",
    "section": "Getting data",
    "text": "Getting data\nUp until now, I have been creating data manually for demonstration purposes. As we move forward, we will focus on analyzing real data. Every data analysis project starts with acquiring data. You can generate your own data through surveys, web scraping, or manual data coding. However, there are also many pre-existing datasets available for use. These datasets are often provided by researchers, governments, NGOs, companies, international organizations, and more. I highly recommend checking out this list of political datasets curated by Erik Gahner Larsen. Throughout this course, we’ll use some of these established datasets in political science.",
    "crumbs": [
      "R basics"
    ]
  },
  {
    "objectID": "session01/basics.html#read-data-into-r",
    "href": "session01/basics.html#read-data-into-r",
    "title": "R basics",
    "section": "Read data into R",
    "text": "Read data into R\nFile formats, paths and R projects\nTo analyze data in R, we first need to import it. While this might sound simple, it can be challenging for beginners. To read a file in R, we need to know two important things: the file format and the path.\nData comes in various file formats, which are standardized ways of storing and organizing data in digital files. These formats dictate how information is encoded and structured, allowing different software programs to understand and interpret the data correctly. The most common format for data is .csv (comma-separated values). In political science, you will also encounter Stata (.dta) and SPSS (.sav) files. R uses different functions to read files depending on their format.\nSecondly, R needs to know where the data is located on your system. A “path” shows the position of a file or folder within your file system, detailing the series of directories and subdirectories leading to the file. There are two types of paths:\n\nThe absolute path gives the complete location of a file or directory, beginning at the root of the file system. Examples include: /home/user/documents/myfile.txt for Unix-like systems, and C:.txt for Windows.\nA relative path indicates the location of a file or directory in relation to the current working directory. For instance, data/mydata.csv points to a file named mydata.csv in the data subdirectory of the present directory.\n\nThe working directory refers to the directory where R is currently operating. If you access files in R without providing an absolute path, it defaults to searching within this working directory.\nYou can see your current working directory in R using the getwd() function. To set a new working directory, use the setwd() function, specifying the desired path as its argument.\n\ngetwd()\n\n[1] \"/Users/malo/Documents/teaching/2024_intro_r/session01\"\n\n\nPlease note that using absolute paths in your code is considered a bad practice because it can make your code less usable for others. Instead, I recommend using R projects. An R project is a dedicated workspace for your R work, where you keep all your files, data, scripts, and output documents together. When you open an R project, it sets everything up so that your files are easy to find and your work is easier to share and reproduce.\nFrom the top left corner of RStudio, click on File and then select New Project. You’ll then be given three options: to create a project in an existing directory, to create one in a new directory, or to check out a project from a version control repository like Git.\nIf you choose an existing directory, navigate to that directory. If you opt for a new directory, you’ll need to name your project and decide its save location on your computer. Once you finalize your choice by clicking Create Project, the working directory in RStudio will automatically be set to your project location. This means that any scripts, data files, or outputs you work on will be saved here by default, making them easier to find and reference later.\nInside your project directory, you’ll notice a file with an .Rproj extension, such as MyProject.Rproj. In the future, you can open this file to launch RStudio directly into this project, ensuring the working directory is already set. It’s also advisable to set up specific folders within your project directory for different components like scripts, data, and figures. This keeps everything tidy and organized as your project expands.\nFunctions to import data in R\nThere are different functions to import data into R.\n\nFor CSV (Comma Separated Values) files, the base R function read.csv() is commonly used. However, within the tidyverse package suite, the readr package provides the read_csv() function, which tends to be faster and more versatile. The read_csv2() function is designed for CSV files using semicolons ; as field separators and commas , as decimal points, compared to read_csv()which assumes commas as field separators.\nExcel files can be read using the readxl package, which provides the read_excel() function. This function can read both .xls and .xlsx files.\nFor SPSS data files, you can use the haven package. This package contains the function read_sav() for .sav files.\nStata data files, or .dta files, can also be read using the haven package with the read_dta() function.\nIf you’re working with R’s native data format, .RData or .RDS, you can use the load() function for .RData files and the readRDS() function for .RDS files.\nBase R To import data in R, we will use the R base provides several functions to import data such as read.csv(). I personnaly prefer using the readr package which is part of the tidyverse. To read a csv file, you will need the read_csv() function.\n\nAll these functions enable you to read a file by specifying its path or its URL on the web. Here, for example, I import a CSV file containing data on candidates for the 2024 legislative elections in France.\n\nlibrary(tidyverse)\n\nfrench_candidates &lt;- read_csv(\"data/2024_french_candidates.csv\")\n\nRows: 4009 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): code_department, departement, first_name, name, nuance, gender, pro...\ndbl (2): exprimes_per, age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfrench_candidates\n\n# A tibble: 4,009 × 9\n   code_department departement first_name name  nuance exprimes_per gender   age\n   &lt;chr&gt;           &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt;\n 1 01              Ain         Christophe MAÎT… RN            39.4  M.        55\n 2 01              Ain         Xavier     BRET… LR            24.0  M.        62\n 3 01              Ain         Sébastien  GUER… UG            23.4  M.        51\n 4 01              Ain         Vincent    GUIL… ENS           11.7  M.        48\n 5 01              Ain         Éric       LAHY  EXG            0.69 M.        58\n 6 01              Ain         Michael    MEND… DSV            0.52 M.        36\n 7 01              Ain         Cyril      VINC… DSV            0.33 M.        42\n 8 01              Ain         Andréa     KOTA… RN            39.2  M.        35\n 9 01              Ain         Romain     DAUB… DVC           24.2  M.        44\n10 01              Ain         Maxime     MEYER UG            23.6  M.        37\n# ℹ 3,999 more rows\n# ℹ 1 more variable: profession &lt;chr&gt;\n\n\nExport data\nTypically, we might want to save data to our disk after adding information, merging different datasets, and so on. This is useful for later reuse or to share the data with someone else. To achieve this, simply replace ‘read’ with ‘write’ in all the functions I’ve introduced previously. You’ll also need to specify the name of the R object containing your data and the path where you wish to export the data.\n\nwrite_csv(french_candidates, \"data/french_candidates2.csv\")",
    "crumbs": [
      "R basics"
    ]
  },
  {
    "objectID": "session01/basics.html#import-and-write-data",
    "href": "session01/basics.html#import-and-write-data",
    "title": "\n2  R basics\n",
    "section": "\n2.8 Import and write data",
    "text": "2.8 Import and write data\n\n2.8.1 Getting data\nUp until now, we have been creating data manually for demonstration purposes. As we move forward, we will focus on analyzing real data. Every data analysis project starts with acquiring data. You can generate your own data through surveys, web scraping, or manual data coding (primary data sources). However, there are also many pre-existing datasets available for use (secondary data sources). These datasets are often provided by researchers, governments, NGOs, companies, international organizations, and more. I highly recommend checking out this list of political datasets curated by Erik Gahner Larsen. Throughout this course, we will use some of these established datasets in political science.\n\n2.8.2 Read data into R\n\n2.8.2.1 File formats, paths and R projects\nTo analyze data in R, we first need to import it. While this might sound simple, it can be challenging for beginners. To read a file in R, we need to know two important things: the file format and the path.\nData comes in various file formats, which are standardized ways of storing and organizing data in digital files. These formats dictate how information is encoded and structured, allowing different software programs to understand and interpret the data correctly. The most common format for data is .csv (comma-separated values). In political science, you will also encounter Stata (.dta) and SPSS (.sav) files. R uses different functions to read files depending on their format.\nSecondly, R needs to know where the data is located on your system. A “path” shows the position of a file or folder within your file system, detailing the series of directories and subdirectories leading to the file. There are two types of paths:\n\nThe absolute path gives the complete location of a file or directory, beginning at the root of the file system. Examples include: /home/user/documents/myfile.txt for Unix-like systems, and C:.txt for Windows.\nA relative path indicates the location of a file or directory in relation to the current working directory. For instance, data/mydata.csv points to a file named mydata.csv in the data subdirectory of the present directory.\n\nThe working directory refers to the directory where R is currently operating. If you access files in R without providing an absolute path, it defaults to searching within this working directory.\nYou can see your current working directory in R using the getwd() function. To set a new working directory, use the setwd() function, specifying the desired path as its argument.\n\ngetwd()\n\n[1] \"/Users/malo/Documents/teaching/2024_intro_r/session01\"\n\n\nPlease note that using absolute paths in your code is considered a bad practice because it can make your code less usable for others. Instead, I recommend using R projects. An R project is a dedicated workspace for your R work, where you keep all your files, data, scripts, and output documents together. When you open an R project, it sets everything up so that your files are easy to find and your work is easier to share and reproduce.\nFrom the top left corner of RStudio, click on File and then select New Project. You’ll then be given three options: to create a project in an existing directory, to create one in a new directory, or to check out a project from a version control repository like Git.\nIf you choose an existing directory, navigate to that directory. If you opt for a new directory, you’ll need to name your project and decide its save location on your computer. Once you finalize your choice by clicking Create Project, the working directory in RStudio will automatically be set to your project location. This means that any scripts, data files, or outputs you work on will be saved here by default, making them easier to find and reference later.\nInside your project directory, you’ll notice a file with an .Rproj extension, such as MyProject.Rproj. In the future, you can open this file to launch RStudio directly into this project, ensuring the working directory is already set. It’s also advisable to set up specific folders within your project directory for different components like scripts, data, and figures. This keeps everything tidy and organized as your project expands.\n\n2.8.3 Functions to import data in R\nThere are different functions to import data into R.\n\nFor CSV (Comma Separated Values) files, the base R function read.csv() is commonly used. However, within the tidyverse package suite, the readr package provides the read_csv() function, which tends to be faster and more versatile. The read_csv2() function is designed for CSV files using semicolons ; as field separators and commas , as decimal points, compared to read_csv()which assumes commas as field separators.\nExcel files can be read using the readxl package, which provides the read_excel() function. This function can read both .xls and .xlsx files.\nFor SPSS data files, you can use the haven package. This package contains the function read_sav() for .sav files.\nStata data files, or .dta files, can also be read using the haven package with the read_dta() function.\nIf you’re working with R’s native data format, .RData or .RDS, you can use the load() function for .RData files and the readRDS() function for .RDS files.\nBase R To import data in R, we will use the R base provides several functions to import data such as read.csv(). I personnaly prefer using the readr package which is part of the tidyverse. To read a csv file, you will need the read_csv() function.\n\nAll these functions enable you to read a file by specifying its path or its URL on the web. Here, for example, I import a CSV file containing data on candidates for the 2024 legislative elections in France.\n\nlibrary(tidyverse)\n\nfrench_candidates &lt;- read_csv(\"data/2024_french_candidates.csv\")\n\nRows: 4009 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): code_department, departement, first_name, name, nuance, gender, pro...\ndbl (2): exprimes_per, age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(french_candidates)\n\nRows: 4,009\nColumns: 9\n$ code_department &lt;chr&gt; \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", …\n$ departement     &lt;chr&gt; \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\", \"Ain\"…\n$ first_name      &lt;chr&gt; \"Christophe\", \"Xavier\", \"Sébastien\", \"Vincent\", \"Éric\"…\n$ name            &lt;chr&gt; \"MAÎTRE\", \"BRETON\", \"GUERAUD\", \"GUILLERMIN\", \"LAHY\", \"…\n$ nuance          &lt;chr&gt; \"RN\", \"LR\", \"UG\", \"ENS\", \"EXG\", \"DSV\", \"DSV\", \"RN\", \"D…\n$ exprimes_per    &lt;dbl&gt; 39.37, 23.96, 23.45, 11.68, 0.69, 0.52, 0.33, 39.20, 2…\n$ gender          &lt;chr&gt; \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", \"M.\", …\n$ age             &lt;dbl&gt; 55, 62, 51, 48, 58, 36, 42, 35, 44, 37, 49, 69, 59, 43…\n$ profession      &lt;chr&gt; \"(22) - Commerçant et assimilé\", \"(33) - Cadre de la f…\n\n\n\n2.8.4 Export data\nTypically, we might want to save data to our disk after adding information, merging different datasets, and so on. This is useful for later reuse or to share the data with someone else. To achieve this, simply replace ‘read’ with ‘write’ in all the functions I’ve introduced previously. You’ll also need to specify the name of the R object containing your data and the path where you wish to export the data.\n\nwrite_csv(french_candidates, \"data/french_candidates2.csv\")",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "session01/basics.html#rstudio-scripts-quarto",
    "href": "session01/basics.html#rstudio-scripts-quarto",
    "title": "R basics",
    "section": "",
    "text": "How Rstudio is organized\nTo interact with the language R, we use the interface of Rstudio. When you open it on your laptop, you will probably see something similar to the screenshot below.\n\nOn the upper right panel, you have what we call the environment. At this stage, you should see a message indicating that your environment is empty. However, when we use data in RStudio, what we manipulate will appear there. For instance, if I import a dataset, I will see in that pane that my dataset has been imported.\nOn the bottom left panel, you see what we call our working directory. This is where the files, such as the data, that we want to use are stored on our laptop. It is essential to be aware that if you remove a file here from RStudio, it will also be deleted from your laptop. Exercise caution when managing files in this directory to avoid unintentional deletions.\nOn the left side, you have the console where you can type commands, indicated by the &gt; sign. If you type something here and then click on Enter, you will see the result. So, if you type 2+2, it will produce the output 4 just below. Whatever code you produce, the output will appear in the console.",
    "crumbs": [
      "R basics"
    ]
  },
  {
    "objectID": "session01/basics.html#scripts",
    "href": "session01/basics.html#scripts",
    "title": "R basics",
    "section": "Scripts",
    "text": "Scripts\nHowever, when we interact with R, we rarely use the console to type code. Instead, we mostly use scripts, which are specific types of documents where you can write code, save it, and reuse it later on. To open a new script, you can go into the menu bar, click on File &gt; New File &gt; Rscript (you can also use the shortcut Ctrl+Shift+N on Windows/Linux or Cmd+Shift+N on macOS). his will open a new document, known as an R script, in the editor on the upper left side of the interface. Here, you can start writing and saving your R code for analysis and projects. You can type again 2+2. To run a line on a Rscript, place the cursor on the line of code you want to run and press Ctrl + Enter (on Windows/Linux) or Cmd + Enter (on macOS). Just above the script in RStudio, you will also find a Run button that does the same thing. Once you run that code, you should see the output printed in the console. Note that in R scripts, you can write text and comment your code with the #. To save your script, simply click on the small disk icon in the editor’s toolbar and choose a name for the file (Ctrl + S on Windows/Linux or Cmd + S on macOS). You will now see it in the files pane at the bottom left of your screen.\n\n2+2 # This is my first code\n\n[1] 4",
    "crumbs": [
      "R basics"
    ]
  },
  {
    "objectID": "session01/basics.html#quarto",
    "href": "session01/basics.html#quarto",
    "title": "R basics",
    "section": "Quarto",
    "text": "Quarto\nWhile many users opt for R scripts for coding, I won’t extensively employ them in this class. Instead, I’ll be using Quarto documents. You will also be using Quarto as I’ll be requesting you to submit your assignments using this format. Quarto constitutes a method of cohesively editing code and text within a single document, a practice termed literate programming. It enables you to compose code, generate output, conduct analyses in the same document, format the content, and subsequently export it to diverse formats like Word documents, PDFs and html. Additionally, Quarto facilitates the creation of slides, dashboards, books, and websites. Personally, I employ Quarto to craft the course materials.\nTo create a quarto document, click on File &gt; New File &gt; Quarto Document in the menu bar. You will see different options appear but for now, uncheck use virtual markdown editor and click on create an empty document. There are three main differences with an R script :\n\n\nYAML : when you open a quarto document you will have to fill the top matter, called a call a YAML which is separated by --- where you can write different informations and options such as the title, the author, subtitle, abstract, the data and many other things. You can also choose the format of the output by writing format: and choosing among html, docx or pdf.\nYou can type text without the # as if you where typing in any text editor\nTo write code, you need to create what we call a chunk. For this, either go on the menu bar : Code &gt; Insert Chunk or option + Cmd + i in macOs, Ctrl+Alt+i on Windows/Linux. You can then directly type code in that chunk.\n\nTo generate a pdf/html/word document, you need to click on Render (Cmd + Shift + K in macOs, {&lt; kbd win=Shift-Ctrl-P &gt;}}). A new file will appear in your files pane with the output.",
    "crumbs": [
      "R basics"
    ]
  },
  {
    "objectID": "session01/basics.html#r-as-calculator",
    "href": "session01/basics.html#r-as-calculator",
    "title": "R basics",
    "section": "R as calculator",
    "text": "R as calculator\nFirst of all, R is a fancy calculator that can be used to perform fundamental arithmeric operations.\n\n3+7+10 # Addition\n\n[1] 20\n\n4-5 # Substraction\n\n[1] -1\n\n3*9*10 # Multiplication\n\n[1] 270\n\n2/6 # Division\n\n[1] 0.3333333\n\n2^2 # Exponentiation\n\n[1] 4\n\n(2+2)-(4*4)/2^2 # Mix of operations\n\n[1] 0",
    "crumbs": [
      "R basics"
    ]
  },
  {
    "objectID": "index.html#course-structure",
    "href": "index.html#course-structure",
    "title": "Introduction to R",
    "section": "Course structure",
    "text": "Course structure\n\n\n\nSession\nDescription\nDate\n\n\n\n\nSession 1\nGetting started with R and Rstudio\n05/09, 12/09\n\n\nSession 2\nManipulating and describing data\n19/09, 26/09\n\n\nSession 3\nVisualizing data\n03/10, 10/10\n\n\nSession 4\nTesting relationships\n17/10, 24/10\n\n\nSession 5\nCorrelation and simple linear regression\n07/11, 14/11\n\n\nSession 6\nMultivariate analysis\n21/11, 28/11",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#course-validation",
    "href": "index.html#course-validation",
    "title": "Introduction to R",
    "section": "Course validation",
    "text": "Course validation\nLearning programming is fundamentally about practice. It involves trying, encountering challenges, and solving them. The course assessment is structured around a series of exercises that will constitute 30% of your final grade in the Quantitative Methods class. You will be required to apply the code and concepts covered in class to new problems and datasets.\nThroughout the semester, you will complete four individual exercises between sessions. For each exercise, you will perform a series of operations in R and submit your work. Each exercise will be graded on a scale from 0 to 5 points.\nSecond, at the end of the semester, you will complete a bigger group exercise with one other person. This exercise will involve integrating content from throughout the semester and will be completed within a two-week timeframe. It will be graded on a scale from 0 to 20 points.\n\n\n\nAssignments\nDescription\nDue date\nWeight\n\n\n\n\nExercise 1\nIndividual\nBefore session 2\n5%\n\n\nExercise 2\nIndividual\nBefore session 3\n5%\n\n\nExercise 3\nIndividual\nBefore session 4\n5%\n\n\nExercise 4\nIndividual\nbefore session 5\n5%\n\n\nExercise 5\nGroup\nTwo weeks after session 6\n10%",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#course-material",
    "href": "index.html#course-material",
    "title": "Introduction to R",
    "section": "Course material",
    "text": "Course material\nBefore each session, you will be provided with the class material, which you should download to your laptop to follow along. Additionally, all class activities and resources will be available on this website for future reference. You will also need to submit your exercises on the course’s Moodle page.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#help-and-office-hours",
    "href": "index.html#help-and-office-hours",
    "title": "Introduction to R",
    "section": "Help and office hours",
    "text": "Help and office hours",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#help",
    "href": "index.html#help",
    "title": "Introduction to R",
    "section": "Help",
    "text": "Help\nIf you have any questions regarding the course, need help, or are looking for additional resources, please do not hesitate to contact me via email. I will be happy to assist you and will try to reply as quickly as possible.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "Introduction to R",
    "section": "Requirements",
    "text": "Requirements\nThis class does not require any prior programming or statistical experience and is designed for complete beginners. However, it does require some basic knowledge of how to use a computer. You should be able to navigate your computer’s file system, create and move folders, and download and save files. Specifically, each class’s content will be provided as a zip file, which you will need to download, unzip, and move to a folder on your computer. If you are not familiar with these operations, please refer to this tutorial.\nThis class requires you to bring a laptop to each session with R and RStudio installed by the start of the course. The ‘Setting up R and RStudio’ page on this website provides a step-by-step guide for installation. If you encounter any issues during the setup or are unable to bring a laptop to class, please let me know.",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "index.html#ressources",
    "href": "index.html#ressources",
    "title": "Introduction to R",
    "section": "Ressources",
    "text": "Ressources\nThis course does not have a required textbook or mandatory readings. However, if you wish to deepen your understanding of the content covered, I recommend familiarizing yourself with the following resources:\n\nR for Data Science, this is THE R classic by Hadley Wickham, you should definitely take a look to better understand what we cover in this course.\nTelling stories with data by Rohan Alexander : one of my favorite book on data science with R. (a bit more advanced)\nComputational analysis of communication by van Atteveldt et al.\nComputational Thinking for Social Scientists by Jae Yeon Kim\nIntroduction to data science by Rafael Irizarry\n\nThere are also many other introductions to R available online, each offering different approaches to teaching the same concepts. I recommend the following:\n\nIntroduction to R, by Felix Lennert\nIntroduction to R by Alex Douglas et al.\n\nIf you want ressources in french, these are the two most comprehensive introduction you will find :\n\nIntroduction à R et au tidyverse by Julien Barnier\nGuide pour l’analyse de données d’enquêtes avec R by Joseph Larmarange",
    "crumbs": [
      "Course overview"
    ]
  },
  {
    "objectID": "session01/workflow.html",
    "href": "session01/workflow.html",
    "title": "\n1  Rstudio, scripts, quarto\n",
    "section": "",
    "text": "1.1 How Rstudio is organized\nTo interact with the language R, we use the interface of Rstudio. When you open it on your laptop, you will probably see something similar to the screenshot below.\nOn the upper right panel, you have what we call the environment. At this stage, you should see a message indicating that your environment is empty. However, when we use data in RStudio, what we manipulate will appear there. For instance, if I import a dataset, I will see in that pane that my dataset has been imported.\nOn the bottom left panel, you see what we call our working directory. This is where the files, such as the data, that we want to use are stored on our laptop. It is essential to be aware that if you remove a file here from RStudio, it will also be deleted from your laptop. Exercise caution when managing files in this directory to avoid unintentional deletions.\nOn the left side, you have the console where you can type commands, indicated by the &gt; sign. If you type something here and then click on Enter, you will see the result. So, if you type 2+2, it will produce the output 4 just below. Whatever code you produce, the output will appear in the console.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Rstudio, scripts, quarto</span>"
    ]
  },
  {
    "objectID": "session01/workflow.html#scripts",
    "href": "session01/workflow.html#scripts",
    "title": "\n1  Rstudio, scripts, quarto\n",
    "section": "\n1.2 Scripts",
    "text": "1.2 Scripts\nHowever, when we interact with R, we rarely use the console to type code. Instead, we mostly use scripts, which are specific types of documents where you can write code, save it, and reuse it later on. To open a new script, you can go into the menu bar, click on File &gt; New File &gt; Rscript (you can also use the shortcut Ctrl+Shift+N on Windows/Linux or Cmd+Shift+N on macOS). his will open a new document, known as an R script, in the editor on the upper left side of the interface. Here, you can start writing and saving your R code for analysis and projects. You can type again 2+2. To run a line on a Rscript, place the cursor on the line of code you want to run and press Ctrl + Enter (on Windows/Linux) or Cmd + Enter (on macOS). Just above the script in RStudio, you will also find a Run button that does the same thing. Once you run that code, you should see the output printed in the console. Note that in R scripts, you can write text and comment your code with the #. To save your script, simply click on the small disk icon in the editor’s toolbar and choose a name for the file (Ctrl + S on Windows/Linux or Cmd + S on macOS). You will now see it in the files pane at the bottom left of your screen.\n\n2+2 # This is my first code\n\n[1] 4",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Rstudio, scripts, quarto</span>"
    ]
  },
  {
    "objectID": "session01/workflow.html#quarto",
    "href": "session01/workflow.html#quarto",
    "title": "\n1  Rstudio, scripts, quarto\n",
    "section": "\n1.3 Quarto",
    "text": "1.3 Quarto\nWhile many users opt for R scripts for coding, I won’t extensively employ them in this class. Instead, I’ll be using Quarto documents. You will also be using Quarto as I’ll be requesting you to submit your assignments using this format. Quarto constitutes a method of cohesively editing code and text within a single document, a practice termed literate programming. It enables you to compose code, generate output, conduct analyses in the same document, format the content, and subsequently export it to diverse formats like Word documents, PDFs and html. Additionally, Quarto facilitates the creation of slides, dashboards, books, and websites. Personally, I employ Quarto to craft the course materials.\nTo create a quarto document, click on File &gt; New File &gt; Quarto Document in the menu bar. You will see different options appear but for now, uncheck use virtual markdown editor and click on create an empty document. There are three main differences with an R script :\n\n\nYAML : when you open a quarto document you will have to fill the top matter, called a call a YAML which is separated by --- where you can write different informations and options such as the title, the author, subtitle, abstract, the data and many other things. You can also choose the format of the output by writing format: and choosing among html, docx or pdf.\nYou can type text without the # as if you where typing in any text editor\nTo write code, you need to create what we call a chunk. For this, either go on the menu bar : Code &gt; Insert Chunk or option + Cmd + i in macOs, Ctrl+Alt+i on Windows/Linux. You can then directly type code in that chunk.\n\nTo generate a pdf/html/word document, you need to click on Render (Cmd + Shift + K in macOs, {&lt; kbd win=Shift-Ctrl-P &gt;}}). A new file will appear in your files pane with the output.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Rstudio, scripts, quarto</span>"
    ]
  },
  {
    "objectID": "session01/help.html",
    "href": "session01/help.html",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "",
    "text": "3.1 R documentation\nEvery function or package in R comes with documentation provided by its creators. You can access this documentation directly from RStudio by placing a ? before the function or package name in the console and executing the command. This will open the documentation in the help pane, where you’ll find a description of the function, its various arguments, and some usage examples.\n?readr::read_csv # Access the documentation of the read_csv function",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#cheatsheets",
    "href": "session01/help.html#cheatsheets",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "\n3.2 Cheatsheets",
    "text": "3.2 Cheatsheets\nEvery package in the tidyverse (and some others) has a cheatsheet that provides information about its various functions. You can find these cheatsheets at this link For example, check out the readr cheatsheet.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#online-ressources",
    "href": "session01/help.html#online-ressources",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "\n3.3 Online ressources",
    "text": "3.3 Online ressources\nFirst, remember that you’re not alone in encountering errors in R; many others have faced similar issues before you. Often, they have sought help online. If R gives you an error you don’t understand, it’s likely that someone else has encountered the same issue and discussed it online. Start by checking if others have asked similar questions. Websites dedicated to R programming frequently have solutions from experienced users. Additionally, Google can be a valuable resource. Whether you’re trying to accomplish a task (e.g., “how to import a .dta file in R”) or resolve an error, searching the error message or your query can provide valuable insights.\nOften, you’ll find yourself on a site called Stackoverflow, a community hub for users of various programming languages. You can often copy and paste the code you find there, but it’s important to tweak and adapt it to fit your specific needs. Remember, in the world of programming, it’s common for everyone to borrow and adapt code from others. Another helpful resource is the Rstudio Commmunity. Additionally, the #rstats hashtag on Twitter can provide insights and discussions from the R programming community.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#ai-is-your-friend",
    "href": "session01/help.html#ai-is-your-friend",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "\n3.4 AI is your friend",
    "text": "3.4 AI is your friend\nLastly, we’ve entered the era of generative AI. When coding, Large Language Models, particularly ChatGPT, can swiftly emerge as invaluable allies. By supplying ChatGPT with your errors or seeking guidance for specific coding tasks, you can obtain outstanding results. I strongly suggest incorporating it into your coding journey. However, exercise caution: ChatGPT might sometimes suggest non-existent functions or present inaccurate information. It isn’t a magic bullet, but you can quickly assess the accuracy of its suggestions by testing the code in R. If the code doesn’t work correctly, the information may be incorrect. For instance, check out this example example where I asked ChatGPT to explain how to import a Stata file in R.",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#most-common-errors",
    "href": "session01/help.html#most-common-errors",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "\n3.5 Most common errors",
    "text": "3.5 Most common errors\nFinally, some errors are really common and you will probably face them often. I provide you here a (non exhaustive) list of those to help you troubleshooting1.\n\n3.5.0.1 Syntax errors\nMany errors beginners encounter in R stem from syntax issues: a slight coding mistake can lead RStudio to misunderstand your intentions. Common errors include typos in function names or forgetting symbols like ), ,, or \". For example, if you missed a closing \" when trying to subset the Abascal string from the candidates vector: candidates[candidates == \"Abascal], you’d likely see a + in the console. This indicates that R is awaiting further input to process your command.\n\n3.5.0.2 The “not found” errors\n\n\nError: function 'x' not found : mispelling or package not loaded\n\n\nLibrary(tidyverse)\n\nError in Library(tidyverse): could not find function \"Library\"\n\nmeans(c(15,16,19)) \n\nError in means(c(15, 16, 19)): could not find function \"means\"\n\nread_html(\"https://labour.org.uk/category/latest/press-release/\") # Read html code from a webpage\n\nError in read_html(\"https://labour.org.uk/category/latest/press-release/\"): could not find function \"read_html\"\n\n\nMistakes related to capitalization or misspelling are common. For instance, attempting to compute the mean of a number vector but mistakenly adding an “s” to the mean() function will lead to an error. In another scenario, you might aim to read a webpage’s HTML code for web scraping purposes. While the function might be correctly spelled, the error arises if the required rvest package isn’t loaded beforehand. When encountering such errors, ensure you’ve spelled functions correctly and loaded the necessary package (e.g., using library(rvest)).\n\n\nError: object 'x' not found : typo, forgot to run the line or saving object\n\n\nleaders &lt;- c(\"Chassaigne\", \"Vallaud\", \"Chatelain\", \"Panot\")\nleader[1]\n\nError in eval(expr, envir, enclos): object 'leader' not found\n\n\nYou might alo want to look only at leaders from right-wing parties in the object right_wing_leaders Here, the error happens because we did not save any object with this value yet.\n\nright_wing_leaders\n\nError in eval(expr, envir, enclos): object 'right_wing_leaders' not found\n\nright_wing_leaders &lt;- c(\"Waucquiez\")\nright_wing_leaders\n\n[1] \"Waucquiez\"\n\n\nError in install.packages : object 'x' not found\n\ninstall.packages(rvest)\n\nError in eval(expr, envir, enclos): object 'rvest' not found\n\n\nMost of the time, you just forget the \"\" and you should write install.packages(\"rvest\"). It might also be a typo in the package name (eg. you would have an error with install.packag(\"Rvest\").\n\nError: 'x' does not exist in current working directory\n\n\nreadr::read_csv(\"thisdata.csv\")\n\nError: 'thisdata.csv' does not exist in current working directory ('/Users/malo/Documents/teaching/2024_intro_r/session01').\n\n\nThis error typically arises when you’ve given an incorrect path, and R can’t find your file. Use getwd() to check your current working directory and then adjust the file path as needed.\n\n3.5.0.3 Inconsistent data types\nWe have seen already that R comes with different data types such as logical or character. Many functions takes as argument a vector of a specific type and will not work on other. Below an obvious example : if we try to compute the mean of a character vector, this will not work.\n\nleaders\n\n[1] \"Chassaigne\" \"Vallaud\"    \"Chatelain\"  \"Panot\"     \n\nclass(leaders)\n\n[1] \"character\"\n\nmean(leaders)\n\nWarning in mean.default(leaders): argument is not numeric or logical: returning\nNA\n\n\n[1] NA",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  },
  {
    "objectID": "session01/help.html#footnotes",
    "href": "session01/help.html#footnotes",
    "title": "\n3  Getting help and dealing with errors\n",
    "section": "",
    "text": "I rely on many blogposts, here, here, here, here, here and here↩︎",
    "crumbs": [
      "Getting started with R and Rstudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting help and dealing with errors</span>"
    ]
  }
]